use alloc::vec::Vec;
use stylus_sdk::alloy_primitives::U256;

#[derive(Clone)]
pub struct PoseidonConfig {
    pub mds: Vec<Vec<U256>>,
    pub round_constants: Vec<Vec<U256>>,
    pub full_rounds: usize,
    pub has_initial_round_constant: bool,
    pub state_size: usize,
    pub rate: usize,
    pub power: u32,
}

pub struct PoseidonConstant;

impl PoseidonConstant {
    pub fn poseidon_config_kimchi_fp() -> PoseidonConfig {
        PoseidonConfig {
            mds: vec![
                vec![
                    U256::from_be_bytes([
                        0x1a, 0x9b, 0xd2, 0x50, 0x75, 0x7e, 0x29, 0xef, 0x49, 0x59, 0xb9, 0xbe,
                        0xf5, 0x9b, 0x4e, 0x60, 0xe2, 0x0a, 0x56, 0x30, 0x7d, 0x64, 0x91, 0xe7,
                        0xb7, 0xea, 0x1f, 0xac, 0x67, 0x9c, 0x79, 0x03,
                    ]),
                    U256::from_be_bytes([
                        0x38, 0x4a, 0xa0, 0x9f, 0xaf, 0x3a, 0x48, 0x73, 0x7e, 0x2d, 0x64, 0xf6,
                        0xa0, 0x30, 0xaa, 0x24, 0x2e, 0x6d, 0x5d, 0x45, 0x5a, 0xe4, 0xa1, 0x36,
                        0x96, 0xb4, 0x8a, 0x73, 0x20, 0xc5, 0x06, 0xcd,
                    ]),
                    U256::from_be_bytes([
                        0x3d, 0x2b, 0x7b, 0x02, 0x09, 0xbc, 0x30, 0x80, 0x06, 0x4d, 0x5c, 0xe4,
                        0xa7, 0xa0, 0x36, 0x53, 0xf8, 0x34, 0x65, 0x06, 0xbf, 0xa6, 0xd0, 0x76,
                        0x06, 0x12, 0x17, 0xbe, 0x9e, 0x6c, 0xfe, 0xd5,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x09, 0xee, 0x57, 0xc7, 0x0b, 0xc3, 0x51, 0x22, 0x0b, 0x10, 0x79, 0x83,
                        0xaf, 0xcf, 0xab, 0xbe, 0xa7, 0x98, 0x68, 0xa4, 0xa8, 0xa5, 0x91, 0x3e,
                        0x24, 0xb7, 0xaa, 0xf3, 0xb4, 0xbf, 0x3a, 0x42,
                    ]),
                    U256::from_be_bytes([
                        0x20, 0x98, 0x99, 0x96, 0xbc, 0x29, 0xa9, 0x6d, 0x17, 0x68, 0x4d, 0x3a,
                        0xd4, 0xc8, 0x59, 0x81, 0x31, 0x15, 0x26, 0x7f, 0x35, 0x22, 0x5d, 0x7e,
                        0x1e, 0x9a, 0x5b, 0x54, 0x36, 0xa2, 0x45, 0x8f,
                    ]),
                    U256::from_be_bytes([
                        0x14, 0xe3, 0x9a, 0xdb, 0x2e, 0x17, 0x1a, 0xe2, 0x32, 0x11, 0x64, 0x19,
                        0xee, 0x7f, 0x26, 0xd9, 0x19, 0x1e, 0xdd, 0xe8, 0xa5, 0x63, 0x22, 0x98,
                        0x34, 0x7c, 0xdb, 0x74, 0xc3, 0xb2, 0xe6, 0x9d,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x17, 0x45, 0x44, 0x35, 0x7b, 0x68, 0x7f, 0x65, 0xa9, 0x59, 0x0c, 0x1d,
                        0xf6, 0x21, 0x81, 0x8b, 0x54, 0x52, 0xd5, 0xd4, 0x41, 0x59, 0x7a, 0x94,
                        0x35, 0x7f, 0x11, 0x23, 0x16, 0xef, 0x67, 0xcb,
                    ]),
                    U256::from_be_bytes([
                        0x3c, 0xa9, 0x26, 0x3d, 0xc1, 0xa1, 0x9d, 0x17, 0xcf, 0xbf, 0x15, 0xb0,
                        0x16, 0x6b, 0xb2, 0x5f, 0x95, 0xdf, 0xfc, 0x53, 0x21, 0x2d, 0xb2, 0x07,
                        0xfc, 0xee, 0x35, 0xf0, 0x2c, 0x2c, 0x41, 0x37,
                    ]),
                    U256::from_be_bytes([
                        0x3c, 0xf1, 0xfb, 0xef, 0x75, 0xd4, 0xab, 0x63, 0xb7, 0xa8, 0x12, 0xf8,
                        0x0b, 0x7b, 0x03, 0x73, 0xb2, 0xdc, 0x21, 0xd2, 0x69, 0xba, 0x7c, 0x4c,
                        0x4d, 0x65, 0x81, 0xd5, 0x0a, 0xae, 0x11, 0x4c,
                    ]),
                ],
            ],
            round_constants: vec![
                vec![
                    U256::from_be_bytes([
                        0x2e, 0xc5, 0x59, 0xcd, 0x1a, 0x1f, 0x2f, 0x68, 0x89, 0xfc, 0x8a, 0xe5,
                        0xf0, 0x77, 0x57, 0xf2, 0x02, 0xb3, 0x64, 0x42, 0x96, 0x77, 0xc8, 0xff,
                        0x66, 0x03, 0xfd, 0x6d, 0x93, 0x65, 0x9b, 0x47,
                    ]),
                    U256::from_be_bytes([
                        0x25, 0x53, 0xb0, 0x8c, 0x78, 0x85, 0x51, 0xbf, 0xe0, 0x64, 0xd9, 0x1c,
                        0x17, 0xeb, 0x1e, 0xdb, 0x86, 0x62, 0x28, 0x32, 0x29, 0x75, 0x77, 0x11,
                        0xb2, 0xb3, 0x08, 0x95, 0xf0, 0xaa, 0x3b, 0xad,
                    ]),
                    U256::from_be_bytes([
                        0x25, 0xa7, 0x06, 0xfb, 0x0f, 0x35, 0xb2, 0x60, 0xb6, 0xf2, 0x8d, 0x61,
                        0xe0, 0x82, 0xd3, 0x6a, 0x8f, 0x16, 0x1b, 0xe1, 0xf4, 0xd9, 0x41, 0x63,
                        0x71, 0xa7, 0xb6, 0x5f, 0x2b, 0xfa, 0xfe, 0x4e,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x37, 0xc0, 0x28, 0x1f, 0xda, 0x66, 0x4c, 0xc2, 0x44, 0x8d, 0x0e, 0x7d,
                        0xd7, 0x7a, 0xaa, 0x04, 0x75, 0x22, 0x50, 0x81, 0x7a, 0x94, 0x5a, 0xbe,
                        0xea, 0x8c, 0xfa, 0xaf, 0x3e, 0xe3, 0x9b, 0xa0,
                    ]),
                    U256::from_be_bytes([
                        0x14, 0x04, 0x88, 0x32, 0x12, 0x91, 0x99, 0x8b, 0x85, 0x82, 0xea, 0xce,
                        0xeb, 0x3f, 0xa9, 0xca, 0x39, 0x80, 0xeb, 0x64, 0xa4, 0x53, 0x57, 0x3c,
                        0x5a, 0xaa, 0x29, 0x10, 0x40, 0x59, 0x36, 0xb6,
                    ]),
                    U256::from_be_bytes([
                        0x3a, 0x73, 0xfe, 0x35, 0xb1, 0xbd, 0xd6, 0x6b, 0x80, 0x9a, 0xad, 0x5e,
                        0xab, 0x47, 0xb5, 0xc8, 0x3b, 0x01, 0x46, 0xfd, 0x7f, 0xc6, 0x32, 0xdf,
                        0xb4, 0x9c, 0xd9, 0x1a, 0xe1, 0x16, 0x93, 0x78,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x21, 0xb7, 0xc2, 0xb3, 0x5f, 0xd7, 0x71, 0x0b, 0x06, 0x24, 0x57, 0x11,
                        0xf2, 0x6c, 0x06, 0x35, 0xd3, 0xe2, 0x1d, 0xe4, 0xdb, 0x10, 0xdd, 0x3a,
                        0x73, 0x69, 0xf5, 0x9f, 0x46, 0x8d, 0x7b, 0xe6,
                    ]),
                    U256::from_be_bytes([
                        0x18, 0x03, 0xa0, 0x68, 0xd2, 0x5f, 0xef, 0x2e, 0xf6, 0x52, 0xc8, 0xa4,
                        0x84, 0x7a, 0xa1, 0x8a, 0x29, 0xd1, 0x88, 0x5e, 0x7b, 0xf7, 0x7f, 0xd6,
                        0xa3, 0x4d, 0x66, 0x53, 0x6d, 0x09, 0xca, 0xd7,
                    ]),
                    U256::from_be_bytes([
                        0x29, 0x1d, 0xe6, 0x1c, 0x5e, 0x62, 0x68, 0x21, 0x37, 0x72, 0xcf, 0x7e,
                        0x03, 0xc8, 0x0c, 0x2e, 0x83, 0x3e, 0xb7, 0x7c, 0x58, 0xc4, 0x65, 0x48,
                        0xd1, 0x58, 0xa7, 0x0f, 0xbb, 0xd9, 0x72, 0x4b,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x23, 0x00, 0x43, 0xa0, 0xdc, 0x2d, 0xfa, 0xb6, 0x36, 0x07, 0xcb, 0xe1,
                        0xb9, 0xc4, 0x82, 0xfd, 0xd9, 0x37, 0xfd, 0xef, 0xec, 0xc6, 0x90, 0x5a,
                        0xa5, 0x01, 0x2e, 0x89, 0xba, 0xbe, 0xad, 0x13,
                    ]),
                    U256::from_be_bytes([
                        0x21, 0x8a, 0xf7, 0x7a, 0x05, 0xc5, 0x02, 0xd3, 0xfa, 0x31, 0x44, 0xef,
                        0xcf, 0x47, 0xa0, 0xf2, 0xa0, 0x29, 0x24, 0x98, 0xc1, 0x0c, 0x6e, 0x23,
                        0x68, 0x56, 0x56, 0x74, 0xe7, 0x87, 0x64, 0xf4,
                    ]),
                    U256::from_be_bytes([
                        0x22, 0x3e, 0x2d, 0x94, 0xc1, 0x77, 0xd2, 0x7e, 0x07, 0x1d, 0x55, 0x72,
                        0x9d, 0x13, 0xa9, 0xb2, 0x16, 0x95, 0x5c, 0x71, 0x02, 0xcc, 0x9a, 0x95,
                        0xea, 0x40, 0x05, 0x8e, 0xfb, 0x50, 0x61, 0x17,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2a, 0x18, 0x25, 0x7c, 0x15, 0xad, 0x9b, 0x6f, 0xe8, 0xb7, 0xc5, 0xad,
                        0x21, 0x29, 0x39, 0x4e, 0x90, 0x2c, 0x3c, 0x38, 0x02, 0xe7, 0x38, 0xf2,
                        0x4c, 0xe2, 0xf5, 0x85, 0xae, 0x5f, 0x6a, 0x38,
                    ]),
                    U256::from_be_bytes([
                        0x0a, 0x6f, 0x7b, 0xa7, 0x5f, 0x21, 0x64, 0x03, 0xd2, 0xe4, 0x94, 0x04,
                        0x69, 0xd1, 0x99, 0x47, 0x4a, 0x65, 0xaa, 0x5e, 0xf8, 0x14, 0xe3, 0x64,
                        0x00, 0xbd, 0xde, 0xf0, 0x61, 0x58, 0xdc, 0xf8,
                    ]),
                    U256::from_be_bytes([
                        0x16, 0x9b, 0xe4, 0x1c, 0x62, 0x27, 0x95, 0x6e, 0xfe, 0xf5, 0xb4, 0xcd,
                        0xde, 0x65, 0xd0, 0x0d, 0x5e, 0x04, 0xfe, 0x76, 0x61, 0x78, 0xbd, 0xc7,
                        0x31, 0x61, 0x5c, 0x6e, 0x5b, 0x93, 0xe3, 0x1e,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2e, 0x28, 0xf5, 0x0a, 0x9a, 0x55, 0xd2, 0xe9, 0x17, 0x74, 0x08, 0x30,
                        0x72, 0x73, 0x45, 0x44, 0x41, 0x7e, 0x29, 0x0a, 0x1c, 0xfe, 0xbc, 0x01,
                        0x80, 0x1b, 0x94, 0xd0, 0x72, 0x8f, 0xe6, 0x63,
                    ]),
                    U256::from_be_bytes([
                        0x0f, 0xde, 0xdf, 0x8d, 0xa8, 0x65, 0x4a, 0x22, 0x83, 0x10, 0x40, 0xcf,
                        0xc7, 0x44, 0x32, 0x46, 0x4b, 0x17, 0x3e, 0xe6, 0x86, 0x28, 0xfd, 0x90,
                        0x49, 0x84, 0x80, 0xb9, 0x90, 0x2f, 0x28, 0x19,
                    ]),
                    U256::from_be_bytes([
                        0x04, 0x6a, 0x3e, 0xd9, 0x86, 0x3d, 0x2d, 0x73, 0x9d, 0xd8, 0xbc, 0x9e,
                        0x90, 0xa7, 0x46, 0xfd, 0xa1, 0x19, 0x71, 0x62, 0xd0, 0xa0, 0xbe, 0xc3,
                        0xdb, 0x1f, 0x2f, 0x60, 0x42, 0xcf, 0x04, 0xe2,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x21, 0x9e, 0x08, 0xb4, 0x60, 0xc3, 0x05, 0xb4, 0x28, 0x67, 0x0b, 0xac,
                        0xab, 0x86, 0xac, 0x1e, 0x94, 0x58, 0x07, 0x57, 0x78, 0xd3, 0x5c, 0x36,
                        0x19, 0xae, 0x7b, 0xa1, 0xf9, 0xb2, 0xed, 0x76,
                    ]),
                    U256::from_be_bytes([
                        0x38, 0xbb, 0x36, 0xa1, 0x2e, 0xbc, 0xec, 0x4d, 0x4e, 0x87, 0x28, 0xeb,
                        0x43, 0xe3, 0xf1, 0x2a, 0x6e, 0x33, 0xb1, 0xff, 0xa1, 0x46, 0x33, 0x79,
                        0x01, 0x8d, 0x4e, 0x12, 0x42, 0x4e, 0x62, 0xca,
                    ]),
                    U256::from_be_bytes([
                        0x1e, 0x9a, 0xa3, 0xfe, 0x25, 0xd1, 0x16, 0xcc, 0xfb, 0xd6, 0xa8, 0xfc,
                        0xcd, 0xae, 0x0a, 0xa9, 0xbc, 0x16, 0x4a, 0x03, 0xab, 0x7e, 0x95, 0x17,
                        0x04, 0xee, 0x9a, 0x71, 0x5f, 0xbe, 0xde, 0xe6,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x03, 0x0f, 0x33, 0xed, 0x70, 0xda, 0x4c, 0x2b, 0xfb, 0x84, 0x4f, 0xf1,
                        0xa7, 0x55, 0x8b, 0x81, 0x7d, 0x1e, 0xc3, 0x00, 0xda, 0x86, 0xa1, 0x69,
                        0x4f, 0x2d, 0xb4, 0x50, 0x47, 0xd5, 0xf1, 0x8b,
                    ]),
                    U256::from_be_bytes([
                        0x02, 0x82, 0xb0, 0x41, 0x37, 0x35, 0x04, 0x95, 0xab, 0x41, 0x7c, 0xf2,
                        0xc4, 0x73, 0x89, 0xbf, 0x68, 0x1c, 0x39, 0xf6, 0xc2, 0x2d, 0x9e, 0x37,
                        0x0b, 0x7a, 0xf7, 0x5c, 0xbc, 0xbe, 0x4b, 0xb1,
                    ]),
                    U256::from_be_bytes([
                        0x09, 0xb1, 0x52, 0x8d, 0xea, 0x2e, 0xb5, 0xbd, 0x96, 0x90, 0x5b, 0x88,
                        0xff, 0x05, 0xfd, 0xf3, 0xe0, 0xf2, 0x20, 0xfe, 0x1d, 0x93, 0xd1, 0xb5,
                        0x49, 0x53, 0xac, 0x98, 0xfe, 0xc8, 0x25, 0xf0,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x30, 0x08, 0x3d, 0xbb, 0xb5, 0xea, 0xb3, 0x93, 0x11, 0xc7, 0xa8, 0xbf,
                        0xd5, 0xe5, 0x55, 0x67, 0xfa, 0x86, 0x4b, 0x34, 0x68, 0xb5, 0xf9, 0x20,
                        0x0e, 0x52, 0x9c, 0xda, 0x03, 0xd9, 0xef, 0x71,
                    ]),
                    U256::from_be_bytes([
                        0x01, 0x7e, 0xac, 0xe7, 0x3c, 0xf6, 0x7c, 0x61, 0x12, 0x23, 0x9c, 0xbf,
                        0x51, 0xde, 0xc0, 0xe7, 0x14, 0xee, 0x4e, 0x5a, 0x91, 0xdb, 0xc9, 0x20,
                        0x9d, 0xc1, 0x7b, 0xbe, 0xa5, 0xbc, 0xd0, 0x94,
                    ]),
                    U256::from_be_bytes([
                        0x37, 0xaf, 0x1d, 0xe8, 0xf5, 0x47, 0x5b, 0xa1, 0x65, 0xb9, 0x0f, 0x8d,
                        0x56, 0x86, 0x83, 0xd5, 0x4e, 0x21, 0x5d, 0xf9, 0x7e, 0x92, 0x87, 0x94,
                        0x33, 0x70, 0xcf, 0x41, 0x18, 0x42, 0x80, 0x97,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x16, 0xff, 0x75, 0x92, 0x83, 0x6a, 0x45, 0x34, 0x0e, 0xc6, 0xf2, 0xb0,
                        0xf1, 0x22, 0x73, 0x6d, 0x03, 0xf0, 0xbc, 0xb8, 0x40, 0x12, 0xf9, 0x22,
                        0xa4, 0xba, 0xa7, 0x3e, 0xa0, 0xe6, 0x6f, 0x51,
                    ]),
                    U256::from_be_bytes([
                        0x1a, 0x59, 0x85, 0xd4, 0xb3, 0x59, 0xd0, 0x3d, 0xe6, 0x0b, 0x2e, 0xda,
                        0xbb, 0x18, 0x53, 0xf4, 0x76, 0x91, 0x5f, 0xeb, 0xc0, 0xe4, 0x0f, 0x83,
                        0xa2, 0xd1, 0xd0, 0x08, 0x4e, 0xfc, 0x3f, 0xd9,
                    ]),
                    U256::from_be_bytes([
                        0x25, 0x5a, 0x9d, 0x4b, 0xeb, 0x9b, 0x5e, 0xa1, 0x8a, 0xb9, 0x78, 0x2b,
                        0x1a, 0xbb, 0x26, 0x7f, 0xc5, 0xb7, 0x73, 0xb9, 0x8a, 0xb6, 0x55, 0xfd,
                        0x4d, 0x46, 0x96, 0x98, 0xe1, 0xe1, 0xf9, 0x75,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x34, 0xa8, 0xd9, 0xf4, 0x52, 0x00, 0xa9, 0xac, 0x28, 0x02, 0x17, 0x12,
                        0xbe, 0x81, 0xe9, 0x05, 0x96, 0x7b, 0xac, 0x58, 0x0a, 0x0b, 0x9e, 0xe5,
                        0x7b, 0xc4, 0x23, 0x1f, 0x5e, 0xcb, 0x93, 0x6a,
                    ]),
                    U256::from_be_bytes([
                        0x09, 0x79, 0x55, 0x6c, 0xb3, 0xed, 0xcb, 0xe4, 0xf3, 0x3e, 0xdd, 0x20,
                        0x94, 0xf1, 0x44, 0x3b, 0x4b, 0x4e, 0xc6, 0xc4, 0x57, 0xb0, 0x42, 0x5b,
                        0x84, 0x63, 0xe7, 0x88, 0xb9, 0xa2, 0xdc, 0xda,
                    ]),
                    U256::from_be_bytes([
                        0x2a, 0x4d, 0x02, 0x8c, 0x09, 0xad, 0x39, 0xc3, 0x06, 0x66, 0xb7, 0x8b,
                        0x45, 0xcf, 0xad, 0xd5, 0x27, 0x9f, 0x62, 0x39, 0x37, 0x9c, 0x68, 0x9a,
                        0x72, 0x7f, 0x62, 0x66, 0x79, 0x27, 0x26, 0x54,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0c, 0x31, 0xb6, 0x8f, 0x68, 0x50, 0xb3, 0xbd, 0x71, 0xfe, 0x4e, 0x89,
                        0x98, 0x4e, 0x2c, 0x87, 0x41, 0x55, 0x23, 0xfb, 0x54, 0xf2, 0x4e, 0xc8,
                        0xae, 0x71, 0x43, 0x03, 0x70, 0x15, 0x4b, 0x33,
                    ]),
                    U256::from_be_bytes([
                        0x1a, 0x27, 0xca, 0x0b, 0x95, 0x3d, 0x3d, 0xba, 0x6b, 0x8e, 0x01, 0xcf,
                        0x07, 0xd7, 0x6c, 0x61, 0x1a, 0x21, 0x1d, 0x13, 0x9f, 0x2d, 0xff, 0x5a,
                        0xc0, 0x23, 0xed, 0x24, 0x54, 0xf2, 0xed, 0x90,
                    ]),
                    U256::from_be_bytes([
                        0x10, 0x9a, 0xe9, 0x7c, 0x25, 0xd6, 0x02, 0x42, 0xb8, 0x6d, 0x71, 0x69,
                        0x19, 0x6d, 0x22, 0x12, 0xf2, 0x68, 0xb9, 0x52, 0xdf, 0xd9, 0x5a, 0x39,
                        0x37, 0x91, 0x6b, 0x99, 0x05, 0x30, 0x31, 0x80,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x36, 0x98, 0xc9, 0x32, 0xf2, 0xa1, 0x6f, 0x7b, 0xb9, 0xab, 0xac, 0x08,
                        0x9e, 0xc2, 0xde, 0x79, 0xc9, 0x96, 0x58, 0x81, 0x70, 0x88, 0x78, 0x68,
                        0x3c, 0xaf, 0x53, 0xca, 0xa8, 0x3a, 0xd9, 0xc4,
                    ]),
                    U256::from_be_bytes([
                        0x3c, 0x7e, 0x25, 0xe0, 0xac, 0x8f, 0xba, 0x3d, 0xc1, 0x36, 0x0f, 0x8a,
                        0x9a, 0x9f, 0xa0, 0xbe, 0x0e, 0x03, 0x1c, 0x8c, 0x76, 0xa9, 0x34, 0x97,
                        0xb7, 0xca, 0xc7, 0xed, 0x32, 0xad, 0xe6, 0xc0,
                    ]),
                    U256::from_be_bytes([
                        0x2f, 0xc5, 0x02, 0x3c, 0x5e, 0x4a, 0xed, 0x5a, 0xa7, 0xdf, 0xca, 0x0f,
                        0x54, 0x92, 0xf1, 0xb6, 0xef, 0xab, 0x30, 0x99, 0x36, 0x0e, 0xc9, 0x60,
                        0x23, 0x75, 0x12, 0xf4, 0x8c, 0x85, 0x8a, 0x79,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2c, 0x12, 0x47, 0x35, 0xf3, 0xf9, 0x24, 0x54, 0x6f, 0xb4, 0xfd, 0xfa,
                        0x2a, 0x01, 0x8e, 0x03, 0xf5, 0x30, 0x63, 0xd3, 0xa2, 0xe8, 0x7f, 0xd2,
                        0x85, 0xba, 0x8d, 0x64, 0x7e, 0xda, 0x67, 0x65,
                    ]),
                    U256::from_be_bytes([
                        0x12, 0xc8, 0x75, 0xc9, 0xb7, 0x95, 0x91, 0xac, 0xf9, 0x03, 0x3f, 0x8b,
                        0x6c, 0x1e, 0x35, 0x71, 0x26, 0xc4, 0x4b, 0x23, 0xf3, 0x48, 0x6f, 0xbe,
                        0xe0, 0xd9, 0x83, 0x40, 0xa3, 0x38, 0x22, 0x51,
                    ]),
                    U256::from_be_bytes([
                        0x3c, 0xda, 0x93, 0x5e, 0x89, 0x58, 0x57, 0xd3, 0x9a, 0x7d, 0xb8, 0x47,
                        0x6a, 0xed, 0xa5, 0xa5, 0x13, 0x1c, 0xb1, 0x65, 0xa3, 0x53, 0x07, 0x3f,
                        0xd3, 0xe4, 0x73, 0xfd, 0x88, 0x55, 0x52, 0x8d,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x21, 0x8e, 0xb7, 0x56, 0xfa, 0x5f, 0x1d, 0xf9, 0xf1, 0xeb, 0x92, 0x2e,
                        0xf8, 0x0b, 0x08, 0x52, 0x58, 0x87, 0x79, 0xa7, 0x36, 0x8e, 0x3d, 0x01,
                        0x0d, 0xef, 0x15, 0x12, 0x81, 0x5d, 0x87, 0x59,
                    ]),
                    U256::from_be_bytes([
                        0x23, 0xbc, 0xf1, 0x03, 0x29, 0x57, 0x01, 0x5e, 0xf1, 0x71, 0xfb, 0xb4,
                        0x32, 0x9b, 0xca, 0x0c, 0x57, 0xd5, 0x98, 0x85, 0x52, 0x2f, 0x25, 0xf4,
                        0xb0, 0x82, 0xa3, 0xcf, 0x30, 0x1c, 0xfb, 0xc6,
                    ]),
                    U256::from_be_bytes([
                        0x17, 0x47, 0x4c, 0x3b, 0x6a, 0x9b, 0xc1, 0x05, 0x7d, 0xf6, 0x4b, 0x9e,
                        0x4d, 0x62, 0xba, 0xdb, 0xc7, 0xf3, 0x86, 0x7b, 0x3d, 0xd7, 0x57, 0xc7,
                        0x1c, 0x1f, 0x65, 0x62, 0x05, 0xd7, 0xbc, 0xeb,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x01, 0x98, 0x26, 0xc0, 0xee, 0x22, 0x97, 0x2d, 0xeb, 0x41, 0x74, 0x5d,
                        0x3b, 0xd4, 0x12, 0xc2, 0xae, 0x3d, 0x4c, 0x18, 0x53, 0x5f, 0x4b, 0x60,
                        0xc9, 0xe8, 0x70, 0xed, 0xff, 0xa3, 0xd5, 0x50,
                    ]),
                    U256::from_be_bytes([
                        0x30, 0xbc, 0xb1, 0x7d, 0xfd, 0x62, 0x2c, 0x46, 0xf3, 0x27, 0x5f, 0x69,
                        0x83, 0x19, 0xb6, 0x8d, 0x88, 0x16, 0xbe, 0xd0, 0x36, 0x8d, 0xed, 0x43,
                        0x5e, 0xd6, 0x19, 0x92, 0xbc, 0x43, 0xef, 0xa9,
                    ]),
                    U256::from_be_bytes([
                        0x3b, 0xd8, 0x16, 0xc2, 0x14, 0xc6, 0x64, 0x10, 0x22, 0x9c, 0xfb, 0xd1,
                        0xf4, 0xa3, 0xa4, 0x2e, 0x6a, 0x0f, 0x82, 0xf3, 0xc0, 0xd4, 0x9b, 0x09,
                        0xbc, 0x7b, 0x4c, 0x04, 0x2f, 0xf2, 0xc9, 0x4b,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x08, 0x94, 0x3e, 0xc0, 0x1d, 0x9f, 0xb9, 0xf4, 0x3c, 0x84, 0x07, 0x57,
                        0x73, 0x89, 0x79, 0xb1, 0x46, 0xc3, 0xb6, 0xd1, 0x98, 0x22, 0x80, 0xe9,
                        0x2a, 0x52, 0xe8, 0xd0, 0x45, 0x63, 0x3e, 0xa1,
                    ]),
                    U256::from_be_bytes([
                        0x26, 0x70, 0xbf, 0x8c, 0x01, 0x82, 0x2e, 0x31, 0xc7, 0x09, 0x76, 0x26,
                        0x9d, 0x89, 0xed, 0x58, 0xbc, 0x79, 0xad, 0x2f, 0x9d, 0x1e, 0x31, 0x45,
                        0xdf, 0x89, 0x0b, 0xf8, 0x98, 0xb5, 0x7e, 0x47,
                    ]),
                    U256::from_be_bytes([
                        0x0d, 0xd5, 0x3b, 0x41, 0x59, 0x9a, 0xe7, 0x8d, 0xbd, 0x3e, 0x68, 0x9b,
                        0x65, 0xeb, 0xcc, 0xa4, 0x93, 0xef, 0xfa, 0x94, 0xed, 0x76, 0x5e, 0xee,
                        0xc7, 0x5a, 0x0d, 0x3b, 0xb2, 0x04, 0x07, 0xf9,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x06, 0x81, 0x77, 0xd2, 0x93, 0x58, 0x5e, 0x0b, 0x8c, 0x8e, 0x76, 0xa8,
                        0xa5, 0x65, 0xc8, 0x68, 0x9a, 0x1d, 0x88, 0xe6, 0xa9, 0xaf, 0xa7, 0x92,
                        0x20, 0xbb, 0x0a, 0x22, 0x53, 0xf2, 0x03, 0xc3,
                    ]),
                    U256::from_be_bytes([
                        0x35, 0x21, 0x6f, 0x47, 0x10, 0x43, 0x86, 0x6e, 0xdc, 0x32, 0x4a, 0xd8,
                        0xd8, 0xcf, 0x0c, 0xc7, 0x92, 0xfe, 0x7a, 0x10, 0xbf, 0x87, 0x4b, 0x1e,
                        0xea, 0xc6, 0x7b, 0x45, 0x1d, 0x6b, 0x2c, 0xf5,
                    ]),
                    U256::from_be_bytes([
                        0x1f, 0xd6, 0xef, 0xb2, 0x53, 0x6b, 0xfe, 0x11, 0xec, 0x37, 0x36, 0xe7,
                        0xf7, 0x44, 0x8c, 0x01, 0xeb, 0x2a, 0x5a, 0x90, 0x41, 0xbb, 0xf8, 0x46,
                        0x31, 0xcc, 0x83, 0xee, 0x04, 0x64, 0xf6, 0xaf,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2c, 0x98, 0x2c, 0x73, 0x52, 0x10, 0x22, 0x89, 0xfc, 0x1b, 0x48, 0xda,
                        0xfc, 0xd9, 0xe3, 0xcc, 0x36, 0x4d, 0x5a, 0x43, 0x24, 0x57, 0x5e, 0x47,
                        0x21, 0xda, 0xf0, 0xaf, 0x10, 0x03, 0x3c, 0x67,
                    ]),
                    U256::from_be_bytes([
                        0x35, 0x2f, 0x7e, 0x8c, 0x76, 0x62, 0xd8, 0x6d, 0xb9, 0xc7, 0x22, 0xd4,
                        0xd0, 0x77, 0x78, 0x85, 0x87, 0x71, 0xb8, 0x32, 0xaf, 0x5b, 0xb5, 0xdc,
                        0x3b, 0x13, 0xcf, 0x94, 0x85, 0x1c, 0x1b, 0x45,
                    ]),
                    U256::from_be_bytes([
                        0x18, 0xe3, 0xc0, 0xc1, 0xca, 0xa5, 0xe3, 0xed, 0x66, 0xee, 0x1a, 0xb6,
                        0xf5, 0x5a, 0x5c, 0x80, 0x63, 0xd8, 0xc9, 0xb0, 0x34, 0xae, 0x47, 0xdb,
                        0x43, 0x43, 0x51, 0x47, 0x14, 0x9e, 0x37, 0xd5,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x31, 0x24, 0xb1, 0x2d, 0xeb, 0x37, 0xdc, 0xbb, 0x3d, 0x96, 0xc1, 0xa0,
                        0x8d, 0x50, 0x75, 0x23, 0xe3, 0x0e, 0x03, 0xe0, 0x91, 0x95, 0x59, 0xbf,
                        0x2d, 0xaa, 0xab, 0x23, 0x84, 0x22, 0xea, 0xde,
                    ]),
                    U256::from_be_bytes([
                        0x14, 0x3b, 0xf0, 0xde, 0xf3, 0x14, 0x37, 0xeb, 0x21, 0x09, 0x52, 0x00,
                        0xd2, 0xd4, 0x06, 0xe6, 0xe5, 0x72, 0x78, 0x33, 0x68, 0x3d, 0x97, 0x40,
                        0xb9, 0xbf, 0xc1, 0x71, 0x32, 0x15, 0xdc, 0x9a,
                    ]),
                    U256::from_be_bytes([
                        0x1e, 0xbe, 0xe9, 0x21, 0x43, 0xf3, 0x2b, 0x4f, 0x9d, 0x9a, 0x90, 0xad,
                        0x62, 0xb8, 0x48, 0x3c, 0x97, 0x74, 0x80, 0x76, 0x7b, 0x53, 0xc7, 0x1f,
                        0x6b, 0xde, 0x93, 0x4a, 0x8e, 0xf3, 0x8f, 0x17,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0f, 0xf6, 0xc7, 0x94, 0xad, 0x1a, 0xfa, 0xa4, 0x94, 0x08, 0x8d, 0x5f,
                        0x8e, 0xe6, 0xc4, 0x7b, 0xf9, 0xe8, 0x30, 0x13, 0x47, 0x86, 0x28, 0xcf,
                        0x9f, 0x41, 0xf2, 0xe8, 0x13, 0x83, 0xeb, 0xeb,
                    ]),
                    U256::from_be_bytes([
                        0x3d, 0x0a, 0x10, 0xac, 0x3e, 0xe7, 0x07, 0xc6, 0x2e, 0x8b, 0xdf, 0x2c,
                        0xdb, 0x49, 0xac, 0x2c, 0xf4, 0x09, 0x6c, 0xf4, 0x1a, 0x7f, 0x21, 0x4f,
                        0xdd, 0x1f, 0x8f, 0x9a, 0x24, 0x80, 0x4f, 0x17,
                    ]),
                    U256::from_be_bytes([
                        0x1d, 0x61, 0x01, 0x4c, 0xd3, 0xef, 0x0d, 0x87, 0xd0, 0x37, 0xc5, 0x6b,
                        0xdf, 0xa3, 0x70, 0xa7, 0x33, 0x52, 0xb9, 0x5d, 0x47, 0x2e, 0xad, 0x19,
                        0x37, 0xbe, 0xd0, 0x6a, 0x31, 0x80, 0x1c, 0x91,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x12, 0x3e, 0x18, 0x5b, 0x2e, 0xc7, 0xf0, 0x72, 0x50, 0x7a, 0xc1, 0xe4,
                        0xe7, 0x43, 0x58, 0x9b, 0xb2, 0x5c, 0x8f, 0xdb, 0x46, 0x8e, 0x32, 0x9e,
                        0x7d, 0xe1, 0x69, 0x87, 0x5f, 0x90, 0xc5, 0x25,
                    ]),
                    U256::from_be_bytes([
                        0x30, 0xb7, 0x80, 0xc0, 0xc1, 0xcb, 0x06, 0x09, 0x62, 0x37, 0x32, 0x82,
                        0x4c, 0x75, 0x01, 0x7d, 0xa9, 0x79, 0x9b, 0xdc, 0x7e, 0x08, 0xb5, 0x27,
                        0xba, 0xe7, 0xf4, 0x09, 0xeb, 0xdb, 0xec, 0xf2,
                    ]),
                    U256::from_be_bytes([
                        0x1d, 0xfb, 0x38, 0x01, 0xb7, 0xae, 0x4e, 0x20, 0x9f, 0x68, 0x19, 0x56,
                        0x12, 0x96, 0x5c, 0x6e, 0x37, 0xa2, 0xed, 0x5c, 0xf1, 0xee, 0xee, 0x3d,
                        0x46, 0xed, 0xf6, 0x55, 0xd6, 0xf5, 0xaf, 0xef,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2f, 0xde, 0xe4, 0x28, 0x05, 0xb2, 0x77, 0x40, 0x64, 0xe9, 0x63, 0xc7,
                        0x41, 0x55, 0x25, 0x56, 0x01, 0x9a, 0x96, 0x11, 0x92, 0x8d, 0xda, 0x72,
                        0x8b, 0x78, 0x31, 0x1e, 0x1f, 0x04, 0x95, 0x28,
                    ]),
                    U256::from_be_bytes([
                        0x31, 0xb2, 0xb6, 0x5c, 0x43, 0x12, 0x12, 0xed, 0x36, 0xfd, 0xda, 0x53,
                        0x58, 0xd9, 0x0c, 0xd9, 0xcb, 0x51, 0xc9, 0xf4, 0x93, 0xbf, 0xf7, 0x1c,
                        0xdc, 0x75, 0x65, 0x45, 0x47, 0xe4, 0xa2, 0x2b,
                    ]),
                    U256::from_be_bytes([
                        0x1e, 0x3c, 0xa0, 0x33, 0xd8, 0x41, 0x3b, 0x68, 0x8d, 0xb7, 0xa5, 0x43,
                        0xe6, 0x2a, 0xc2, 0xe6, 0x96, 0x44, 0xc0, 0x61, 0x48, 0x01, 0x37, 0x9c,
                        0xfe, 0x62, 0xfa, 0x22, 0x03, 0x19, 0xe0, 0xef,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0c, 0x8e, 0xf1, 0x16, 0x84, 0x25, 0x02, 0x8c, 0x52, 0xa3, 0x2d, 0x93,
                        0xf9, 0x31, 0x31, 0x53, 0xe5, 0x2e, 0x9c, 0xf1, 0x5e, 0x5e, 0xc2, 0xb4,
                        0xca, 0x09, 0xd0, 0x17, 0x30, 0xda, 0xd4, 0x32,
                    ]),
                    U256::from_be_bytes([
                        0x37, 0x8c, 0x73, 0x37, 0x3a, 0x36, 0xa5, 0xed, 0x94, 0xa3, 0x4f, 0x75,
                        0xe5, 0xde, 0x7a, 0x7a, 0x61, 0x87, 0xea, 0x30, 0x13, 0x80, 0xec, 0xfb,
                        0x6f, 0x1a, 0x22, 0xcf, 0x85, 0x52, 0x63, 0x8e,
                    ]),
                    U256::from_be_bytes([
                        0x32, 0x18, 0xae, 0xec, 0x20, 0x04, 0x8a, 0x56, 0x40, 0x15, 0xe8, 0xf2,
                        0x21, 0x65, 0x7f, 0xbe, 0x48, 0x9b, 0xa4, 0x04, 0xd7, 0xf5, 0xf1, 0x5b,
                        0x82, 0x9c, 0x7a, 0x75, 0xa8, 0x5c, 0x2f, 0x44,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x33, 0x12, 0xef, 0x7c, 0xbb, 0xad, 0x31, 0x43, 0x0f, 0x20, 0xf3, 0x09,
                        0x31, 0xb0, 0x70, 0x37, 0x9c, 0x77, 0x11, 0x9c, 0x18, 0x25, 0xc6, 0x56,
                        0x0c, 0xd2, 0xc8, 0x2c, 0xf7, 0x67, 0x79, 0x4e,
                    ]),
                    U256::from_be_bytes([
                        0x35, 0x64, 0x49, 0xa7, 0x13, 0x83, 0x67, 0x4c, 0x60, 0x7f, 0xa3, 0x1d,
                        0xed, 0x8c, 0x0c, 0x0d, 0x2d, 0x20, 0xfb, 0x45, 0xc3, 0x66, 0x98, 0xd2,
                        0x58, 0xce, 0xcd, 0x98, 0x2d, 0xba, 0x47, 0x8c,
                    ]),
                    U256::from_be_bytes([
                        0x0c, 0xc8, 0x8d, 0x1c, 0x91, 0x48, 0x1d, 0x53, 0x21, 0x17, 0x4e, 0x55,
                        0xb4, 0x9b, 0x24, 0x85, 0x68, 0x2c, 0x87, 0xfa, 0xc2, 0xad, 0xb3, 0x32,
                        0x16, 0x7a, 0x20, 0xbc, 0xb5, 0x7d, 0xb3, 0x59,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x1d, 0xef, 0xcc, 0xbd, 0x33, 0x74, 0x08, 0x03, 0xad, 0x28, 0x4b, 0xc4,
                        0x8a, 0xb9, 0x59, 0xf3, 0x49, 0xb9, 0x4e, 0x18, 0xd7, 0x73, 0xc6, 0xc0,
                        0xc5, 0x8a, 0x4b, 0x93, 0x90, 0xcc, 0x30, 0x0f,
                    ]),
                    U256::from_be_bytes([
                        0x2d, 0x26, 0x3c, 0xc2, 0xe9, 0xaf, 0x12, 0x6d, 0x76, 0x8d, 0x9e, 0x1d,
                        0x2b, 0xf2, 0xcb, 0xf3, 0x20, 0x63, 0xbe, 0x83, 0x1c, 0xb1, 0x54, 0x8f,
                        0xfd, 0x71, 0x6b, 0xc3, 0xee, 0x70, 0x34, 0xfe,
                    ]),
                    U256::from_be_bytes([
                        0x11, 0x1e, 0x31, 0x4d, 0xb6, 0xfb, 0x1a, 0x28, 0xe2, 0x41, 0x02, 0x8c,
                        0xe3, 0xd3, 0x47, 0xc5, 0x25, 0x58, 0xa3, 0x3b, 0x6b, 0x11, 0x28, 0x5a,
                        0x97, 0xff, 0xfa, 0x1b, 0x47, 0x9e, 0x96, 0x9d,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x02, 0x74, 0x09, 0x40, 0x1e, 0x92, 0x00, 0x1d, 0x43, 0x4c, 0xba, 0x28,
                        0x68, 0xe9, 0xe3, 0x71, 0x70, 0x31, 0x99, 0xc2, 0x37, 0x2d, 0x23, 0xef,
                        0x32, 0x9e, 0x53, 0x7b, 0x51, 0x3f, 0x45, 0x3e,
                    ]),
                    U256::from_be_bytes([
                        0x24, 0xa8, 0x52, 0xbd, 0xf9, 0xcb, 0x2a, 0x8f, 0xed, 0xd5, 0xe8, 0x5a,
                        0x59, 0x86, 0x7d, 0x49, 0x16, 0xb8, 0xa5, 0x7b, 0xdd, 0x5f, 0x84, 0xe1,
                        0x04, 0x7d, 0x41, 0x07, 0x70, 0xff, 0xff, 0xa0,
                    ]),
                    U256::from_be_bytes([
                        0x20, 0x5d, 0x1b, 0x0e, 0xe3, 0x59, 0xf6, 0x21, 0x84, 0x5a, 0xc6, 0x4f,
                        0xf7, 0xe3, 0x83, 0xa3, 0xeb, 0x81, 0xe0, 0x3d, 0x2a, 0x29, 0x66, 0x55,
                        0x77, 0x46, 0xd2, 0x1b, 0x47, 0x32, 0x9d, 0x6e,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x25, 0xc3, 0x27, 0xe2, 0xcc, 0x93, 0xec, 0x6f, 0x0f, 0x23, 0xb5, 0xe4,
                        0x1c, 0x93, 0x1b, 0xfb, 0xbe, 0x4c, 0x12, 0xda, 0x7d, 0x55, 0xa2, 0xb1,
                        0xc9, 0x1c, 0x79, 0xdb, 0x98, 0x2d, 0xf9, 0x03,
                    ]),
                    U256::from_be_bytes([
                        0x39, 0xdf, 0x3e, 0x22, 0xd2, 0x2b, 0x09, 0xb4, 0x26, 0x5d, 0xa5, 0x0e,
                        0xf1, 0x75, 0x90, 0x9c, 0xe7, 0x9e, 0x8f, 0x0b, 0x95, 0x99, 0xdf, 0xf0,
                        0x1c, 0xf8, 0x0e, 0x70, 0x88, 0x49, 0x82, 0xb9,
                    ]),
                    U256::from_be_bytes([
                        0x09, 0xb0, 0x8d, 0x58, 0x85, 0x3d, 0x8a, 0xc9, 0x08, 0xc5, 0xb1, 0x4e,
                        0x5e, 0xb8, 0x61, 0x1b, 0x45, 0xf4, 0x0f, 0xaa, 0xa5, 0x9c, 0xb8, 0xdf,
                        0xf9, 0x8f, 0xb3, 0x0e, 0xfc, 0xdf, 0xaa, 0x01,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x1e, 0xce, 0x62, 0x37, 0x4d, 0x79, 0xe7, 0x17, 0xdb, 0x4a, 0x68, 0xf9,
                        0xcd, 0xda, 0xaf, 0x52, 0xf8, 0x88, 0x4f, 0x39, 0x73, 0x75, 0xc0, 0xf3,
                        0xc5, 0xc1, 0xdb, 0xaa, 0x9c, 0x57, 0xa0, 0xa6,
                    ]),
                    U256::from_be_bytes([
                        0x3b, 0xd0, 0x89, 0xb7, 0x27, 0xa0, 0xee, 0x08, 0xe2, 0x63, 0xfa, 0x5e,
                        0x35, 0xb6, 0x18, 0xdb, 0x87, 0xd7, 0xbc, 0xce, 0x03, 0x44, 0x14, 0x75,
                        0xe3, 0xfd, 0x49, 0x63, 0x9b, 0x9f, 0xa1, 0xc1,
                    ]),
                    U256::from_be_bytes([
                        0x3f, 0xed, 0xea, 0x75, 0xf3, 0x7a, 0xd9, 0xcf, 0xc9, 0x4c, 0x95, 0x14,
                        0x1b, 0xfb, 0x47, 0x19, 0xee, 0x9b, 0x32, 0xb8, 0x74, 0xb9, 0x3d, 0xcf,
                        0xc0, 0xcc, 0x12, 0xf5, 0x1a, 0x7b, 0x2a, 0xff,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x36, 0xdf, 0xa1, 0x8a, 0x9b, 0xa1, 0xb1, 0x94, 0x22, 0x84, 0x94, 0xa8,
                        0xac, 0xaf, 0x06, 0x68, 0xcb, 0x43, 0xac, 0xa9, 0xd4, 0xe0, 0xa2, 0x51,
                        0xb2, 0x0e, 0xc3, 0x42, 0x4d, 0x0e, 0x65, 0xcd,
                    ]),
                    U256::from_be_bytes([
                        0x11, 0x9e, 0x98, 0xdb, 0x3f, 0x49, 0xcd, 0x7f, 0xcb, 0x3b, 0x06, 0x32,
                        0x56, 0x7d, 0x9c, 0xca, 0xa5, 0x49, 0x8b, 0x0d, 0x41, 0x1a, 0x14, 0x37,
                        0xf5, 0x7c, 0x65, 0x8f, 0x41, 0x93, 0x1d, 0x0c,
                    ]),
                    U256::from_be_bytes([
                        0x11, 0x00, 0xb2, 0x1c, 0x30, 0x64, 0x75, 0xd8, 0x16, 0xb3, 0xef, 0xcd,
                        0x75, 0xc3, 0xae, 0x13, 0x5c, 0x54, 0xad, 0x3c, 0xc5, 0x6c, 0xa2, 0x2a,
                        0xbd, 0x9b, 0x7f, 0x45, 0xe6, 0xd0, 0x2c, 0x19,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x15, 0x79, 0x1f, 0x9b, 0xbe, 0xa2, 0x13, 0x93, 0x72, 0x08, 0xc8, 0x27,
                        0x94, 0xeb, 0x66, 0x7f, 0x15, 0x7f, 0x00, 0x3c, 0x65, 0xb6, 0x4a, 0xa9,
                        0x80, 0x0f, 0x4b, 0xbe, 0xe4, 0xea, 0x51, 0x19,
                    ]),
                    U256::from_be_bytes([
                        0x1a, 0xdb, 0xeb, 0x5e, 0x9c, 0x4d, 0x51, 0x5e, 0xcf, 0xd2, 0x50, 0xeb,
                        0xee, 0x56, 0xa2, 0xa8, 0x16, 0xeb, 0x3e, 0x3d, 0xc8, 0xd5, 0xd4, 0x40,
                        0xc1, 0xab, 0x42, 0x85, 0xb3, 0x50, 0xbe, 0x64,
                    ]),
                    U256::from_be_bytes([
                        0x1f, 0xbf, 0x47, 0x38, 0x84, 0x4a, 0x9a, 0x24, 0x9a, 0xec, 0x25, 0x3e,
                        0x8e, 0x42, 0x60, 0xe4, 0xab, 0x09, 0xe2, 0x6b, 0xea, 0x29, 0xab, 0x00,
                        0x20, 0xbf, 0x0e, 0x81, 0x3c, 0xee, 0xcb, 0xc3,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x34, 0x18, 0xa9, 0x29, 0x55, 0x6e, 0xc5, 0x1a, 0x08, 0x64, 0x59, 0xbb,
                        0x9e, 0x63, 0xa8, 0x21, 0xd4, 0x07, 0x38, 0x8c, 0xce, 0x83, 0x94, 0x9b,
                        0x9a, 0xf3, 0xe3, 0xb0, 0x43, 0x4e, 0xaf, 0x0e,
                    ]),
                    U256::from_be_bytes([
                        0x09, 0x40, 0x6b, 0x5c, 0x3a, 0xf0, 0x29, 0x0f, 0x99, 0x74, 0x05, 0xd0,
                        0xc5, 0x1b, 0xe6, 0x95, 0x44, 0xaf, 0xb2, 0x40, 0xd4, 0x8e, 0xea, 0xb1,
                        0x73, 0x6c, 0xda, 0x04, 0x32, 0xe8, 0xff, 0x9e,
                    ]),
                    U256::from_be_bytes([
                        0x23, 0xec, 0xe5, 0xd7, 0x0b, 0x38, 0xcc, 0xc9, 0xd4, 0x3c, 0xd9, 0x23,
                        0xe5, 0xe3, 0xe2, 0xf6, 0x2d, 0x1d, 0x87, 0x3c, 0x91, 0x41, 0xef, 0x01,
                        0xf8, 0x9b, 0x6d, 0xe1, 0x33, 0x6f, 0x5b, 0xc7,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x18, 0x52, 0xd5, 0x74, 0xe4, 0x6d, 0x37, 0x0a, 0x0b, 0x1e, 0x64, 0xf6,
                        0xc4, 0x1e, 0xeb, 0x8d, 0x40, 0xcf, 0x96, 0xc5, 0x24, 0xa6, 0x29, 0x65,
                        0x66, 0x1f, 0x2e, 0xf8, 0x7e, 0x67, 0x23, 0x4d,
                    ]),
                    U256::from_be_bytes([
                        0x0a, 0x65, 0x70, 0x27, 0xcc, 0xe8, 0xd4, 0xf2, 0x38, 0xea, 0x89, 0x6d,
                        0xde, 0x27, 0x3b, 0x75, 0x37, 0xb5, 0x08, 0x67, 0x4a, 0x36, 0x6c, 0x66,
                        0xb3, 0x78, 0x9d, 0x98, 0x28, 0xb0, 0xce, 0x90,
                    ]),
                    U256::from_be_bytes([
                        0x34, 0x82, 0xf9, 0x8a, 0x46, 0xec, 0x35, 0x81, 0x08, 0xfb, 0xbb, 0x68,
                        0xfd, 0x94, 0xf8, 0xf2, 0xba, 0xa7, 0x3c, 0x72, 0x3b, 0xaf, 0x21, 0x92,
                        0x2a, 0x85, 0x0e, 0x45, 0x51, 0x1f, 0x5a, 0x2d,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x3f, 0x62, 0xf1, 0x64, 0xf8, 0xc9, 0x05, 0xb3, 0x35, 0xa6, 0xcb, 0xf7,
                        0x61, 0x31, 0xd2, 0x43, 0x02, 0x37, 0xe1, 0x7a, 0xd6, 0xab, 0xc7, 0x6d,
                        0x2a, 0x63, 0x29, 0xc1, 0xec, 0x54, 0x63, 0xee,
                    ]),
                    U256::from_be_bytes([
                        0x07, 0xe3, 0x97, 0xf5, 0x03, 0xf9, 0xc1, 0xce, 0xa0, 0x28, 0x46, 0x5b,
                        0x29, 0x50, 0xea, 0x44, 0x4b, 0x15, 0xc5, 0xea, 0xb5, 0x67, 0xd5, 0xa6,
                        0x9e, 0xa2, 0x92, 0x56, 0x85, 0x69, 0x4d, 0xf0,
                    ]),
                    U256::from_be_bytes([
                        0x04, 0x05, 0xf1, 0xfc, 0x71, 0x18, 0x72, 0x37, 0x3d, 0x6e, 0xb5, 0x0a,
                        0x09, 0xfb, 0xfb, 0x05, 0xb2, 0x70, 0x3a, 0xe0, 0xa0, 0xb4, 0xed, 0xb8,
                        0x6a, 0xed, 0xb2, 0x16, 0xdb, 0x17, 0xa8, 0x76,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0b, 0xe0, 0x84, 0x8e, 0xb3, 0xe0, 0x9c, 0x70, 0x27, 0x11, 0x0a, 0xd8,
                        0x42, 0xc5, 0x02, 0x44, 0x1c, 0x97, 0xaf, 0xa1, 0x4a, 0x84, 0x44, 0x06,
                        0xfc, 0xfe, 0xc7, 0x54, 0xa2, 0x56, 0x58, 0xc1,
                    ]),
                    U256::from_be_bytes([
                        0x26, 0xb7, 0x87, 0x88, 0xfd, 0x98, 0xac, 0x02, 0x0b, 0xac, 0x92, 0xd0,
                        0xe7, 0x79, 0x2b, 0xb5, 0xff, 0xed, 0x06, 0xb6, 0x97, 0xd8, 0x47, 0xf6,
                        0x1d, 0x98, 0x4f, 0x90, 0x5d, 0x9b, 0xa8, 0x70,
                    ]),
                    U256::from_be_bytes([
                        0x38, 0xfd, 0x53, 0x18, 0xd3, 0x90, 0x55, 0xc8, 0x2f, 0xef, 0x9b, 0xdd,
                        0x33, 0x31, 0x5a, 0x54, 0x1c, 0x0e, 0xc4, 0x36, 0x3e, 0x6c, 0xc0, 0x68,
                        0x70, 0x05, 0x87, 0x13, 0x55, 0xdf, 0xa5, 0x73,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x38, 0x0b, 0xd0, 0x3b, 0x84, 0x0c, 0x48, 0xc8, 0xba, 0x38, 0x30, 0xe7,
                        0xca, 0xce, 0x72, 0xf9, 0x1a, 0x50, 0x02, 0x21, 0x8c, 0x61, 0x72, 0x94,
                        0xe8, 0xc8, 0xbc, 0x68, 0x7d, 0x52, 0x16, 0xde,
                    ]),
                    U256::from_be_bytes([
                        0x2c, 0x6e, 0x57, 0xdd, 0xc1, 0xd7, 0xc8, 0x1a, 0x02, 0x99, 0xed, 0x49,
                        0xc3, 0xd7, 0x47, 0x59, 0x41, 0x6b, 0xc8, 0x42, 0x6f, 0x30, 0xe2, 0xaf,
                        0x56, 0x22, 0x89, 0x5c, 0x53, 0x1b, 0x4e, 0x1c,
                    ]),
                    U256::from_be_bytes([
                        0x11, 0xd3, 0xa8, 0x1b, 0x26, 0x2f, 0xc7, 0x6e, 0xf5, 0x06, 0xee, 0x6d,
                        0x88, 0xe5, 0x99, 0x1d, 0x0d, 0xe8, 0xcb, 0x9d, 0xd1, 0x62, 0xd9, 0x7c,
                        0x58, 0xb1, 0x75, 0xe3, 0xbc, 0x45, 0x84, 0xf3,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x09, 0xb6, 0xb2, 0x83, 0xeb, 0xaf, 0x45, 0xfb, 0xb1, 0xe4, 0x48, 0x96,
                        0x9a, 0xce, 0x9b, 0xe6, 0x2a, 0xdf, 0x67, 0xdd, 0xf5, 0x86, 0x14, 0x92,
                        0x57, 0x41, 0xde, 0xb6, 0xa1, 0xba, 0x7d, 0xef,
                    ]),
                    U256::from_be_bytes([
                        0x15, 0xd5, 0x09, 0x51, 0x64, 0xc8, 0x85, 0x76, 0x3f, 0xa8, 0x3c, 0xdf,
                        0x77, 0x6d, 0x43, 0x63, 0x82, 0x82, 0x1a, 0x17, 0xbc, 0x55, 0x63, 0xa5,
                        0xb6, 0xf6, 0xdf, 0xcd, 0xac, 0x50, 0x4a, 0xde,
                    ]),
                    U256::from_be_bytes([
                        0x34, 0x27, 0xfd, 0xbf, 0xca, 0x3c, 0xea, 0x23, 0x06, 0x3e, 0xb1, 0x38,
                        0xc5, 0x05, 0x5c, 0x6c, 0xad, 0x9c, 0x42, 0x52, 0xb2, 0x3d, 0x12, 0xc1,
                        0x22, 0x93, 0x30, 0x8e, 0xff, 0x7d, 0x91, 0x24,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x27, 0x2f, 0x12, 0xe7, 0x31, 0x07, 0x7b, 0x74, 0x31, 0x7e, 0xf2, 0x54,
                        0x3c, 0x33, 0xb8, 0x61, 0x94, 0xdb, 0x1d, 0xa5, 0xf6, 0xa7, 0xe1, 0xee,
                        0xe0, 0x65, 0x66, 0x72, 0xc8, 0x16, 0x85, 0xfe,
                    ]),
                    U256::from_be_bytes([
                        0x05, 0x32, 0x3f, 0x85, 0xde, 0xb8, 0xc0, 0x7c, 0x19, 0x3c, 0x37, 0xa7,
                        0x3d, 0x76, 0xf6, 0x11, 0x49, 0x67, 0x91, 0x3a, 0x2b, 0xdc, 0xe1, 0x19,
                        0x95, 0xf1, 0x83, 0xe7, 0x69, 0xf4, 0x29, 0x67,
                    ]),
                    U256::from_be_bytes([
                        0x3d, 0x5c, 0xe4, 0x15, 0xec, 0xae, 0x4b, 0xa4, 0x2b, 0x41, 0x7e, 0xa3,
                        0xa5, 0x01, 0xb4, 0x46, 0x94, 0xf4, 0x6e, 0xfd, 0xdf, 0xf2, 0xfc, 0xca,
                        0x95, 0x2b, 0x09, 0x7f, 0x38, 0x52, 0xd3, 0xd8,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0e, 0x8e, 0xc1, 0x8c, 0x7b, 0x52, 0xc5, 0x14, 0xd4, 0x20, 0x47, 0xf1,
                        0xf0, 0xb2, 0xa9, 0x0c, 0xb8, 0xc0, 0xc7, 0x39, 0x1c, 0xf9, 0x47, 0x9c,
                        0xd7, 0xfd, 0x5b, 0xfe, 0x1d, 0x3d, 0xb8, 0xf2,
                    ]),
                    U256::from_be_bytes([
                        0x01, 0x59, 0x1c, 0x86, 0x5e, 0xa7, 0x06, 0x5d, 0x54, 0x30, 0x45, 0x19,
                        0xf8, 0xbb, 0x26, 0x8b, 0xdd, 0xbe, 0xaf, 0x3a, 0xfa, 0xe5, 0x4e, 0xdc,
                        0xd0, 0x1a, 0x83, 0x3e, 0xd0, 0xa9, 0xef, 0x1a,
                    ]),
                    U256::from_be_bytes([
                        0x3e, 0xdd, 0xbe, 0xee, 0xe5, 0xec, 0xa5, 0xde, 0xee, 0x4b, 0xf1, 0x78,
                        0x9c, 0x43, 0x5e, 0x12, 0x41, 0xe0, 0xd7, 0x11, 0x86, 0xd8, 0xf0, 0xf6,
                        0x2d, 0x74, 0x72, 0x9d, 0xfc, 0x31, 0x19, 0xfb,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x23, 0x69, 0x1c, 0x70, 0x09, 0xb9, 0x28, 0x3b, 0x26, 0x87, 0x66, 0xe8,
                        0xd4, 0x91, 0x71, 0x6d, 0x3c, 0x19, 0x93, 0xe6, 0xec, 0xf4, 0x58, 0xde,
                        0xf8, 0xf7, 0x62, 0xaf, 0x3e, 0x35, 0x57, 0x07,
                    ]),
                    U256::from_be_bytes([
                        0x26, 0xcd, 0xab, 0x2c, 0x83, 0x7e, 0xbe, 0xac, 0x5b, 0xea, 0x4b, 0xe1,
                        0xd6, 0xf0, 0x48, 0x80, 0x34, 0x90, 0x73, 0x74, 0xd8, 0x1a, 0x61, 0xa3,
                        0x4f, 0x1c, 0x4d, 0xb3, 0x97, 0xd4, 0xc0, 0x9b,
                    ]),
                    U256::from_be_bytes([
                        0x2d, 0x22, 0x06, 0x73, 0x06, 0x64, 0xd5, 0x8b, 0xe0, 0x67, 0x6d, 0xad,
                        0x1f, 0xee, 0x0e, 0x99, 0x0c, 0x26, 0x4a, 0x74, 0x10, 0xa2, 0xcd, 0xb6,
                        0xb5, 0x56, 0x53, 0xc1, 0xdf, 0x72, 0xef, 0x56,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2b, 0xb7, 0x4b, 0xb1, 0x85, 0x37, 0x23, 0x34, 0xa4, 0xef, 0x5f, 0x6d,
                        0x18, 0xe2, 0xec, 0xe5, 0x40, 0x86, 0xe6, 0x2b, 0x04, 0x98, 0x5d, 0xd7,
                        0x94, 0xb7, 0x11, 0x7b, 0x0b, 0xe9, 0x21, 0x7f,
                    ]),
                    U256::from_be_bytes([
                        0x36, 0x62, 0x50, 0xfe, 0x92, 0x8c, 0x45, 0xd8, 0xd5, 0xaa, 0x35, 0xf0,
                        0xa1, 0x42, 0x75, 0x49, 0x07, 0xff, 0x3c, 0x59, 0x84, 0x10, 0x19, 0x9b,
                        0x58, 0x9b, 0x28, 0xcd, 0x85, 0x1b, 0x22, 0x04,
                    ]),
                    U256::from_be_bytes([
                        0x18, 0x68, 0xf8, 0x11, 0x84, 0x82, 0xc6, 0xb4, 0xa5, 0xa6, 0x1a, 0x81,
                        0xc8, 0xaa, 0xca, 0x12, 0x89, 0x53, 0x17, 0x9c, 0x20, 0xf7, 0x3a, 0x44,
                        0x02, 0x2d, 0x99, 0x76, 0xbd, 0xc3, 0x4a, 0xf1,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0b, 0x79, 0x01, 0xc6, 0x70, 0xe1, 0xd7, 0x5d, 0x72, 0x6e, 0xb8, 0x8d,
                        0x00, 0x09, 0x50, 0xb3, 0xc9, 0x63, 0xf0, 0xf7, 0xa6, 0xca, 0x24, 0x99,
                        0x4b, 0xdc, 0x07, 0xae, 0x2f, 0x78, 0xb4, 0xd3,
                    ]),
                    U256::from_be_bytes([
                        0x03, 0x2c, 0x4b, 0xd8, 0xab, 0x70, 0xe1, 0xf2, 0x5a, 0xf7, 0x7a, 0xf5,
                        0x7d, 0xd3, 0x40, 0xc8, 0xe6, 0xc8, 0xa1, 0x01, 0xdf, 0xc5, 0xe8, 0xdd,
                        0x03, 0x31, 0x45, 0x66, 0xdb, 0x90, 0xb8, 0x70,
                    ]),
                    U256::from_be_bytes([
                        0x1c, 0xe3, 0x6d, 0xb3, 0x1f, 0xe6, 0xea, 0x3c, 0xd9, 0x30, 0x8d, 0xb9,
                        0xaa, 0x43, 0xa8, 0xaf, 0x5c, 0x41, 0xa8, 0xf0, 0xa6, 0x50, 0x9b, 0xfe,
                        0x00, 0xf0, 0xe7, 0xb4, 0x86, 0xc0, 0xab, 0x8a,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x26, 0x59, 0x6e, 0xa9, 0xe1, 0x91, 0x5e, 0x53, 0xda, 0x34, 0x79, 0xe9,
                        0xd1, 0x3c, 0x3c, 0x92, 0x05, 0x05, 0xe2, 0x44, 0x9e, 0x32, 0x58, 0x10,
                        0xff, 0x6c, 0xa8, 0x55, 0xfe, 0x4b, 0x7c, 0x6e,
                    ]),
                    U256::from_be_bytes([
                        0x30, 0xf2, 0x96, 0xa2, 0x69, 0x86, 0x8a, 0x7f, 0xca, 0x8f, 0x5b, 0x1e,
                        0x26, 0x9c, 0x01, 0x16, 0x30, 0x4d, 0xf3, 0x17, 0x29, 0x55, 0x9a, 0x27,
                        0x0e, 0x71, 0x35, 0x09, 0xd3, 0xa6, 0xd5, 0xdc,
                    ]),
                    U256::from_be_bytes([
                        0x02, 0x58, 0x89, 0x61, 0xef, 0xf7, 0x89, 0x7d, 0x87, 0xeb, 0x6a, 0xc7,
                        0x23, 0x50, 0xef, 0x9f, 0x52, 0x64, 0x06, 0x47, 0xcb, 0xd2, 0x31, 0x36,
                        0x91, 0x9a, 0x99, 0x4d, 0xfd, 0x19, 0x79, 0xd5,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x16, 0xa4, 0x9e, 0x69, 0x72, 0x1e, 0x80, 0x69, 0x0d, 0x41, 0xe0, 0x62,
                        0x29, 0xe9, 0xbc, 0x2d, 0xba, 0xf9, 0xa2, 0xab, 0xf4, 0xb8, 0x93, 0x88,
                        0xdb, 0x24, 0x85, 0x59, 0x54, 0x09, 0xd6, 0x2b,
                    ]),
                    U256::from_be_bytes([
                        0x3d, 0x7a, 0xca, 0x02, 0xc0, 0x51, 0xfc, 0xad, 0x80, 0x73, 0xcf, 0xd6,
                        0x72, 0x10, 0xcd, 0x42, 0x3a, 0x31, 0x88, 0x8a, 0xfc, 0x4a, 0x44, 0x4d,
                        0x9d, 0x3a, 0xdf, 0x3d, 0x6c, 0x5d, 0xa7, 0xbf,
                    ]),
                    U256::from_be_bytes([
                        0x29, 0x9b, 0xd4, 0x8a, 0x74, 0x0b, 0x77, 0x90, 0x07, 0x52, 0x68, 0x31,
                        0x2a, 0xb8, 0x07, 0x2c, 0x72, 0x42, 0x1d, 0xe5, 0xa6, 0x43, 0x7f, 0xa5,
                        0xe2, 0x54, 0x31, 0xef, 0x95, 0x18, 0x47, 0xb4,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x11, 0xa6, 0x9b, 0x86, 0x7d, 0x9e, 0xa2, 0x2e, 0xc1, 0xb2, 0xf2, 0x8e,
                        0x96, 0x61, 0x71, 0x29, 0xe3, 0x6e, 0xef, 0xae, 0xa9, 0xe8, 0x12, 0x6b,
                        0xdc, 0x6a, 0x42, 0xb9, 0x90, 0x72, 0x90, 0x2b,
                    ]),
                    U256::from_be_bytes([
                        0x25, 0xbc, 0x1a, 0xf3, 0x91, 0xf3, 0xc1, 0xf2, 0x28, 0x4a, 0x95, 0xda,
                        0x92, 0xb5, 0x88, 0x3d, 0x1b, 0x3a, 0x40, 0x79, 0x4b, 0x23, 0x58, 0xb2,
                        0xe7, 0xa7, 0x0f, 0xca, 0x22, 0xda, 0x64, 0xce,
                    ]),
                    U256::from_be_bytes([
                        0x36, 0x1a, 0xb3, 0x84, 0x3f, 0x4d, 0x8d, 0xda, 0xde, 0xde, 0x39, 0xd8,
                        0x2b, 0xb1, 0xa8, 0x10, 0x9f, 0x89, 0xb6, 0xd9, 0xaa, 0x11, 0x7b, 0x8f,
                        0x36, 0x5d, 0xe4, 0x38, 0x95, 0xde, 0x0b, 0xaa,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x38, 0xef, 0x3a, 0xb5, 0xb6, 0x1c, 0x11, 0x7a, 0x34, 0x65, 0xa0, 0x17,
                        0xa9, 0xc8, 0xba, 0x4c, 0x22, 0x76, 0x59, 0xb4, 0x1f, 0xdf, 0x14, 0x52,
                        0x06, 0xd5, 0xc9, 0x60, 0xf4, 0x9d, 0xd4, 0x5b,
                    ]),
                    U256::from_be_bytes([
                        0x39, 0x92, 0xf8, 0x3f, 0x26, 0x14, 0x3d, 0xbd, 0xbd, 0x33, 0x56, 0x04,
                        0xa1, 0xa1, 0x4d, 0xaf, 0x23, 0x8a, 0xe4, 0x3c, 0x24, 0x97, 0x83, 0xf6,
                        0x94, 0xfe, 0xaf, 0x56, 0x0a, 0xaa, 0xe2, 0x0f,
                    ]),
                    U256::from_be_bytes([
                        0x35, 0x02, 0x87, 0x97, 0x7e, 0xb7, 0x1c, 0x81, 0xb1, 0x0e, 0xcd, 0x03,
                        0x9a, 0xad, 0x99, 0xcf, 0xa9, 0xed, 0x84, 0xa0, 0x43, 0x01, 0xcb, 0x30,
                        0x86, 0x9e, 0x1d, 0xc7, 0xfa, 0x1d, 0xc6, 0x38,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x3a, 0xfb, 0x5b, 0xc1, 0x26, 0x02, 0x05, 0x86, 0xdc, 0xcc, 0xba, 0x32,
                        0xdd, 0x05, 0x4c, 0xd9, 0xa3, 0xf3, 0xb8, 0x34, 0xca, 0x96, 0x78, 0xd6,
                        0x80, 0x2c, 0x48, 0xb1, 0xda, 0x97, 0xd6, 0xed,
                    ]),
                    U256::from_be_bytes([
                        0x17, 0x2b, 0x7c, 0x2d, 0x8e, 0x7e, 0x4b, 0x06, 0xd1, 0x83, 0xa2, 0x57,
                        0x5b, 0x79, 0x07, 0x49, 0xd0, 0x97, 0x0c, 0x54, 0x96, 0x64, 0x07, 0xfa,
                        0x8f, 0x59, 0x07, 0x2c, 0x72, 0x9d, 0xe6, 0x71,
                    ]),
                    U256::from_be_bytes([
                        0x2e, 0xb5, 0x3f, 0xe3, 0xa2, 0x78, 0x68, 0x8a, 0x70, 0x49, 0x45, 0x69,
                        0xe5, 0x4a, 0x0f, 0x0d, 0x26, 0x99, 0x35, 0xae, 0xc6, 0xc8, 0x97, 0xbe,
                        0xf4, 0xd3, 0x68, 0xc1, 0xf6, 0x7d, 0x57, 0xe4,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x03, 0x75, 0xae, 0x56, 0xb8, 0xd9, 0x31, 0x0d, 0x55, 0x3e, 0xd7, 0x7d,
                        0x40, 0x6d, 0xed, 0xc3, 0xf0, 0x39, 0x3e, 0x5a, 0x32, 0x1b, 0x71, 0xca,
                        0xee, 0x6a, 0x5b, 0xb7, 0x07, 0x8b, 0x50, 0x35,
                    ]),
                    U256::from_be_bytes([
                        0x1d, 0x49, 0xa0, 0xd5, 0x3b, 0xc2, 0x99, 0x3c, 0xbf, 0x1f, 0xb5, 0xd1,
                        0xda, 0x9b, 0xb7, 0x6f, 0xe4, 0x6a, 0x70, 0x31, 0xd5, 0xe5, 0xd4, 0x3f,
                        0xad, 0xbf, 0x54, 0xbc, 0x17, 0xc1, 0xef, 0x38,
                    ]),
                    U256::from_be_bytes([
                        0x13, 0x2d, 0x17, 0xb8, 0x7c, 0xab, 0x6d, 0x70, 0x7d, 0xdf, 0xa1, 0xf0,
                        0x1d, 0xf1, 0x72, 0x4a, 0xd3, 0x79, 0x57, 0xe9, 0x89, 0xc4, 0x4f, 0x1f,
                        0xf7, 0x14, 0x26, 0x36, 0x7f, 0x95, 0x31, 0x60,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x06, 0x2d, 0xa5, 0x28, 0x09, 0x48, 0xd8, 0xc6, 0xc4, 0xac, 0xc7, 0xe6,
                        0xa1, 0xaa, 0x42, 0x1f, 0x0f, 0x9e, 0xc1, 0x79, 0xa4, 0x41, 0x46, 0x75,
                        0x00, 0x60, 0xbe, 0x4b, 0xe6, 0x75, 0x5f, 0x85,
                    ]),
                    U256::from_be_bytes([
                        0x0a, 0x4b, 0x4d, 0x5c, 0xde, 0x54, 0xa9, 0x74, 0xea, 0x4e, 0x57, 0xee,
                        0x41, 0x32, 0xd2, 0xab, 0x25, 0x10, 0xc3, 0x00, 0xf2, 0x19, 0x30, 0xd6,
                        0xbb, 0xbf, 0x21, 0x1d, 0x1a, 0xdd, 0x80, 0xf9,
                    ]),
                    U256::from_be_bytes([
                        0x33, 0x56, 0xf1, 0xfb, 0xea, 0xc4, 0x93, 0xcc, 0xab, 0x75, 0x2b, 0x70,
                        0xbb, 0xed, 0x82, 0x1c, 0xe4, 0x99, 0x65, 0xc1, 0x92, 0x84, 0xd7, 0xaa,
                        0xcd, 0x78, 0xfb, 0xf3, 0xff, 0x86, 0x4e, 0x91,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x04, 0x27, 0x21, 0xe8, 0xa9, 0xcc, 0x32, 0x55, 0x78, 0x51, 0xfe, 0xb0,
                        0xe0, 0x19, 0x0c, 0x5d, 0xfb, 0xf4, 0xcb, 0x1b, 0x8f, 0x47, 0xd3, 0x7e,
                        0x7e, 0x65, 0x3e, 0xc6, 0xff, 0x8a, 0x40, 0x59,
                    ]),
                    U256::from_be_bytes([
                        0x05, 0x3d, 0x9b, 0x26, 0x33, 0xff, 0xf3, 0x1c, 0xa4, 0xfc, 0x57, 0x24,
                        0xce, 0x6b, 0x44, 0x22, 0x31, 0x81, 0x28, 0xcd, 0xf0, 0x18, 0x97, 0xd3,
                        0x21, 0xe8, 0x6f, 0x47, 0xcd, 0xf7, 0x48, 0xb1,
                    ]),
                    U256::from_be_bytes([
                        0x26, 0x7d, 0x96, 0xca, 0xea, 0xfd, 0xe5, 0xdb, 0xd3, 0xdb, 0x1f, 0x06,
                        0x68, 0xb0, 0x9c, 0xcd, 0x53, 0x2a, 0x22, 0xf0, 0x20, 0x54, 0x94, 0x71,
                        0x6a, 0x78, 0x62, 0x19, 0xfb, 0x4c, 0x80, 0x1c,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x39, 0x31, 0x69, 0x97, 0x73, 0x76, 0x10, 0x19, 0x3c, 0x3f, 0x9f, 0xfc,
                        0xfd, 0x4e, 0x23, 0xd3, 0x8a, 0xac, 0x12, 0xcd, 0x7b, 0x95, 0xb8, 0xd2,
                        0x56, 0xd7, 0x74, 0x10, 0x16, 0x50, 0xa6, 0xca,
                    ]),
                    U256::from_be_bytes([
                        0x19, 0x1e, 0x37, 0x74, 0x62, 0x98, 0x65, 0x63, 0xfd, 0xab, 0xf9, 0xb2,
                        0x35, 0x29, 0xf7, 0xc8, 0x4c, 0x6b, 0x20, 0x0b, 0x91, 0x01, 0xb3, 0xa5,
                        0x09, 0x6b, 0xca, 0x5f, 0x37, 0x79, 0x81, 0xfb,
                    ]),
                    U256::from_be_bytes([
                        0x20, 0xf8, 0x9a, 0xf9, 0x72, 0x2f, 0x79, 0xc8, 0x60, 0xd2, 0x05, 0x9a,
                        0x0e, 0xc2, 0x09, 0xcf, 0x3a, 0x79, 0x25, 0xad, 0x07, 0x98, 0xca, 0xb6,
                        0x55, 0xec, 0xa6, 0x2f, 0xe7, 0x3f, 0xf3, 0xd9,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x1c, 0xa5, 0x68, 0xae, 0xdd, 0xb2, 0xef, 0x39, 0x1a, 0x7c, 0x78, 0xec,
                        0xf1, 0x04, 0xd3, 0x2d, 0x78, 0x5b, 0x9c, 0xa1, 0x45, 0xd9, 0x7e, 0x35,
                        0x87, 0x9d, 0xf3, 0x53, 0x4a, 0x7d, 0x1e, 0x0b,
                    ]),
                    U256::from_be_bytes([
                        0x25, 0xde, 0x9b, 0xa0, 0xa3, 0x74, 0x72, 0xc3, 0xb4, 0xc0, 0xb9, 0xc3,
                        0xbc, 0x25, 0xcb, 0xbf, 0x78, 0xd9, 0x18, 0x81, 0xb6, 0xf9, 0x4e, 0xe7,
                        0x0e, 0x4a, 0xbf, 0x09, 0x02, 0x11, 0x25, 0x1c,
                    ]),
                    U256::from_be_bytes([
                        0x33, 0x93, 0xde, 0xbd, 0x38, 0xd3, 0x11, 0x88, 0x1c, 0x75, 0x83, 0xbe,
                        0xe0, 0x7e, 0x60, 0x5e, 0xf0, 0xe5, 0x5c, 0x62, 0xf0, 0x50, 0x8c, 0xcc,
                        0x2d, 0x26, 0x51, 0x8c, 0xd5, 0x68, 0xe1, 0xef,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x03, 0x8d, 0xf2, 0xfd, 0x18, 0xa8, 0xd7, 0x56, 0x38, 0x06, 0xaa, 0x9d,
                        0x99, 0x4a, 0x61, 0x1f, 0x64, 0x2d, 0x5c, 0x39, 0x73, 0x88, 0xd1, 0xdd,
                        0x3e, 0x78, 0xbc, 0x7a, 0x45, 0x15, 0xc5, 0xb1,
                    ]),
                    U256::from_be_bytes([
                        0x05, 0xc6, 0x50, 0x3f, 0xf1, 0xee, 0x54, 0x8f, 0x24, 0x35, 0xad, 0x91,
                        0x48, 0xd7, 0xfb, 0x94, 0xc9, 0x22, 0x2b, 0x09, 0x08, 0xf4, 0x45, 0x53,
                        0x7a, 0x66, 0x67, 0x04, 0x7f, 0x6d, 0x50, 0x1c,
                    ]),
                    U256::from_be_bytes([
                        0x10, 0x4c, 0x88, 0xd6, 0xd0, 0x68, 0x2d, 0x82, 0xd3, 0xd6, 0x64, 0x82,
                        0x6d, 0xc9, 0x56, 0x5d, 0xb1, 0x01, 0xa2, 0x20, 0xaa, 0x8f, 0x90, 0x57,
                        0x2e, 0xb7, 0x98, 0x46, 0x8a, 0x82, 0xa2, 0xab,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x2c, 0xaa, 0xd6, 0x10, 0x8c, 0x09, 0xee, 0x6a, 0xee, 0x78, 0x51, 0xb4,
                        0xa2, 0xd2, 0xd3, 0xb7, 0xc3, 0xca, 0x3c, 0x56, 0xa8, 0x00, 0x03, 0xc8,
                        0x47, 0x1f, 0x90, 0xbf, 0xa4, 0xac, 0x62, 0x8b,
                    ]),
                    U256::from_be_bytes([
                        0x0a, 0x57, 0xdb, 0xd4, 0xc3, 0x27, 0x82, 0x6c, 0x8a, 0x97, 0xbc, 0x72,
                        0x85, 0xf9, 0x4b, 0xcd, 0xdb, 0x96, 0x61, 0x77, 0x34, 0x6f, 0x17, 0x92,
                        0xc4, 0xbd, 0x70, 0x88, 0xaa, 0x03, 0x53, 0xf3,
                    ]),
                    U256::from_be_bytes([
                        0x3c, 0x15, 0x55, 0x2f, 0x91, 0x24, 0x31, 0x8b, 0x84, 0x33, 0xd0, 0x1b,
                        0xb5, 0x3b, 0xa0, 0x4b, 0xa1, 0xcc, 0x9e, 0xb9, 0x1d, 0x83, 0xb9, 0x18,
                        0xe3, 0x2f, 0xea, 0x39, 0xfb, 0xe9, 0x08, 0xfa,
                    ]),
                ],
                vec![
                    U256::from_be_bytes([
                        0x0e, 0x10, 0xc1, 0x0c, 0xbb, 0xe1, 0x71, 0x7a, 0x94, 0x41, 0xc6, 0x29,
                        0x9c, 0x4f, 0xc0, 0x87, 0xc2, 0x22, 0x20, 0x8b, 0xd4, 0xfa, 0x8f, 0x3b,
                        0xe6, 0x6d, 0x20, 0x75, 0xf6, 0x23, 0xb5, 0x13,
                    ]),
                    U256::from_be_bytes([
                        0x1e, 0x8b, 0x25, 0x4c, 0xbf, 0xf2, 0xc9, 0x2a, 0x83, 0xdf, 0xf1, 0x72,
                        0x8c, 0x81, 0xdd, 0x22, 0xa9, 0x57, 0x0f, 0x59, 0x0e, 0x49, 0x7c, 0xb2,
                        0xd6, 0x40, 0x04, 0x2c, 0xb8, 0x79, 0xa9, 0x30,
                    ]),
                    U256::from_be_bytes([
                        0x18, 0x12, 0xdb, 0xcd, 0x70, 0xc4, 0x40, 0x61, 0x00, 0x57, 0xbb, 0xfd,
                        0xd0, 0xcc, 0x4d, 0x31, 0xd1, 0xfa, 0xf5, 0x78, 0x64, 0x19, 0xb5, 0x38,
                        0x41, 0xc4, 0xad, 0xc4, 0x3f, 0x2b, 0x23, 0x52,
                    ]),
                ],
            ],
            full_rounds: 55,
            has_initial_round_constant: false,
            state_size: 3,
            rate: 2,
            power: 7,
        }
    }
}

pub struct FiniteField;
impl FiniteField {
    pub fn mod_p(x: U256, p: U256) -> U256 {
        if x < p {
            x
        } else {
            x % p
        }
    }

    pub fn power(a: U256, n: u32, p: U256) -> U256 {
        let mut a = Self::mod_p(a, p);
        let mut x = U256::from(1);
        let mut n = n;

        // Special optimization for power 7 (used in Poseidon)
        if n == 7 {
            let a2 = Self::mul(a, a, p); // a^2
            let a4 = Self::mul(a2, a2, p); // a^4
            let a3 = Self::mul(a2, a, p); // a^3 = a^2 * a
            return Self::mul(a4, a3, p); // a^7 = a^4 * a^3
        }

        // General case for other exponents
        while n > 0 {
            if n & 1 != 0 {
                x = Self::mul(x, a, p);
            }
            a = Self::mul(a, a, p);
            n >>= 1;
        }
        x
    }

    pub fn add(x: U256, y: U256, p: U256) -> U256 {
        let sum = x.wrapping_add(y);
        if sum >= p {
            sum - p
        } else {
            sum
        }
    }

    pub fn mul(x: U256, y: U256, p: U256) -> U256 {
        let x_mod = Self::mod_p(x, p);
        let y_mod = Self::mod_p(y, p);

        // For large numbers, we need to be careful about overflow
        if x_mod == U256::ZERO || y_mod == U256::ZERO {
            return U256::ZERO;
        }

        // Use widening multiplication approach to handle potential overflow
        let mut result = U256::ZERO;
        let mut multiplicand = x_mod;
        let mut multiplier = y_mod;

        while multiplier > U256::ZERO {
            if multiplier & U256::from(1) != U256::ZERO {
                result = Self::add(result, multiplicand, p);
            }
            multiplicand = Self::add(multiplicand, multiplicand, p);
            multiplier >>= 1;
        }

        result
    }
}

pub struct PoseidonHash;

impl PoseidonHash {
    // Prime field modulus for Mina
    pub fn p() -> U256 {
        U256::from_str_radix(
            "40000000000000000000000000000000224698fc094cf91b992d30ed00000001",
            16,
        )
        .unwrap()
    }

    /// Main hash function - equivalent to the C# Hash method
    pub fn hash(input: Vec<U256>) -> U256 {
        let initial_state = vec![U256::ZERO; 3];
        let config = PoseidonConstant::poseidon_config_kimchi_fp();
        Self::poseidon_update(initial_state, input, &config)[0]
    }

    pub fn poseidon_update(
        mut state: Vec<U256>,
        input: Vec<U256>,
        config: &PoseidonConfig,
    ) -> Vec<U256> {
        if input.is_empty() {
            Self::permutation(&mut state, config);
            return state;
        }

        // Calculate padded length
        let padded_len = if input.len() % config.rate == 0 {
            input.len()
        } else {
            ((input.len() / config.rate) + 1) * config.rate
        };

        let mut array = vec![U256::ZERO; padded_len];

        // Copy input to array
        for (i, &val) in input.iter().enumerate() {
            array[i] = val;
        }

        let p = Self::p();

        // Process each block
        for chunk in array.chunks(config.rate) {
            for (i, &val) in chunk.iter().enumerate() {
                if i < config.rate {
                    state[i] = FiniteField::add(state[i], val, p);
                }
            }
            Self::permutation(&mut state, config);
        }

        state
    }

    pub fn permutation(state: &mut Vec<U256>, config: &PoseidonConfig) {
        let p = Self::p();
        let state_size = config.state_size;

        // Handle initial round constant if needed
        let mut round_offset = 0;
        if config.has_initial_round_constant {
            for i in 0..state_size {
                state[i] = FiniteField::add(state[i], config.round_constants[0][i], p);
            }
            round_offset = 1;
        }

        // Main rounds
        for round in 0..config.full_rounds {
            // S-box layer: raise each element to power
            for i in 0..state_size {
                state[i] = FiniteField::power(state[i], config.power, p);
            }

            // Linear layer: matrix multiplication + round constants
            let mut new_state = vec![U256::ZERO; state_size];
            for i in 0..state_size {
                let mut acc = config.round_constants[round + round_offset][i];
                for j in 0..state_size {
                    let prod = FiniteField::mul(config.mds[i][j], state[j], p);
                    acc = FiniteField::add(acc, prod, p);
                }
                new_state[i] = acc;
            }
            *state = new_state;
        }
    }
}
