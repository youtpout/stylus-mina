use alloc::vec::Vec;
use stylus_sdk::alloy_primitives::U256;

// Constantes statiques pour Ã©viter les allocations
static MDS: [[U256; 3]; 3] = [
    [
        U256::from_limbs([
            0xb7ea1fac679c7903,
            0xe20a56307d6491e7,
            0x4959b9bef59b4e60,
            0x1a9bd250757e29ef,
        ]),
        U256::from_limbs([
            0x96b48a7320c506cd,
            0x2e6d5d455ae4a136,
            0x7e2d64f6a030aa24,
            0x384aa09faf3a4873,
        ]),
        U256::from_limbs([
            0x061217be9e6cfed5,
            0xf8346506bfa6d076,
            0x064d5ce4a7a03653,
            0x3d2b7b0209bc3080,
        ]),
    ],
    [
        U256::from_limbs([
            0x24b7aaf3b4bf3a42,
            0xa79868a4a8a5913e,
            0x0b107983afcfabbe,
            0x09ee57c70bc35122,
        ]),
        U256::from_limbs([
            0x1e9a5b5436a2458f,
            0x3115267f35225d7e,
            0x17684d3ad4c85981,
            0x20989996bc29a96d,
        ]),
        U256::from_limbs([
            0x347cdb74c3b2e69d,
            0x191edde8a5632298,
            0x32116419ee7f26d9,
            0x14e39adb2e171ae2,
        ]),
    ],
    [
        U256::from_limbs([
            0x357f112316ef67cb,
            0x5452d5d441597a94,
            0xa9590c1df621818b,
            0x174544357b687f65,
        ]),
        U256::from_limbs([
            0xfcee35f02c2c4137,
            0x95dffc53212db207,
            0xcfbf15b0166bb25f,
            0x3ca9263dc1a19d17,
        ]),
        U256::from_limbs([
            0x4d6581d50aae114c,
            0xb2dc21d269ba7c4c,
            0xb7a812f80b7b0373,
            0x3cf1fbef75d4ab63,
        ]),
    ],
];

static ROUND_CONSTANTS: [[U256; 3]; 55] = [
    [
        U256::from_limbs([
            0x6603fd6d93659b47,
            0x02b364429677c8ff,
            0x89fc8ae5f07757f2,
            0x2ec559cd1a1f2f68,
        ]),
        U256::from_limbs([
            0xb2b30895f0aa3bad,
            0x8662283229757711,
            0xe064d91c17eb1edb,
            0x2553b08c788551bf,
        ]),
        U256::from_limbs([
            0x71a7b65f2bfafe4e,
            0x8f161be1f4d94163,
            0xb6f28d61e082d36a,
            0x25a706fb0f35b260,
        ]),
    ],
    [
        U256::from_limbs([
            0xea8cfaaf3ee39ba0,
            0x752250817a945abe,
            0x448d0e7dd77aaa04,
            0x37c0281fda664cc2,
        ]),
        U256::from_limbs([
            0x5aaa2910405936b6,
            0x3980eb64a453573c,
            0x8582eaceeb3fa9ca,
            0x140488321291998b,
        ]),
        U256::from_limbs([
            0xb49cd91ae1169378,
            0x3b0146fd7fc632df,
            0x809aad5eab47b5c8,
            0x3a73fe35b1bdd66b,
        ]),
    ],
    [
        U256::from_limbs([
            0x7369f59f468d7be6,
            0xd3e21de4db10dd3a,
            0x06245711f26c0635,
            0x21b7c2b35fd7710b,
        ]),
        U256::from_limbs([
            0xa34d66536d09cad7,
            0x29d1885e7bf77fd6,
            0xf652c8a4847aa18a,
            0x1803a068d25fef2e,
        ]),
        U256::from_limbs([
            0xd158a70fbbd9724b,
            0x833eb77c58c46548,
            0x3772cf7e03c80c2e,
            0x291de61c5e626821,
        ]),
    ],
    [
        U256::from_limbs([
            0xa5012e89babead13,
            0xd937fdefecc6905a,
            0x3607cbe1b9c482fd,
            0x230043a0dc2dfab6,
        ]),
        U256::from_limbs([
            0x68565674e78764f4,
            0xa0292498c10c6e23,
            0xfa3144efcf47a0f2,
            0x218af77a05c502d3,
        ]),
        U256::from_limbs([
            0xea40058efb506117,
            0x16955c7102cc9a95,
            0x071d55729d13a9b2,
            0x223e2d94c177d27e,
        ]),
    ],
    [
        U256::from_limbs([
            0x4ce2f585ae5f6a38,
            0x902c3c3802e738f2,
            0xe8b7c5ad2129394e,
            0x2a18257c15ad9b6f,
        ]),
        U256::from_limbs([
            0x00bddef06158dcf8,
            0x4a65aa5ef814e364,
            0xd2e4940469d19947,
            0x0a6f7ba75f216403,
        ]),
        U256::from_limbs([
            0x31615c6e5b93e31e,
            0x5e04fe766178bdc7,
            0xfef5b4cdde65d00d,
            0x169be41c6227956e,
        ]),
    ],
    [
        U256::from_limbs([
            0x801b94d0728fe663,
            0x417e290a1cfebc01,
            0x1774083072734544,
            0x2e28f50a9a55d2e9,
        ]),
        U256::from_limbs([
            0x498480b9902f2819,
            0x4b173ee68628fd90,
            0x831040cfc7443246,
            0x0fdedf8da8654a22,
        ]),
        U256::from_limbs([
            0xdb1f2f6042cf04e2,
            0xa1197162d0a0bec3,
            0x9dd8bc9e90a746fd,
            0x046a3ed9863d2d73,
        ]),
    ],
    [
        U256::from_limbs([
            0x19ae7ba1f9b2ed76,
            0x9458075778d35c36,
            0x28670bacab86ac1e,
            0x219e08b460c305b4,
        ]),
        U256::from_limbs([
            0x018d4e12424e62ca,
            0x6e33b1ffa1463379,
            0x4e8728eb43e3f12a,
            0x38bb36a12ebcec4d,
        ]),
        U256::from_limbs([
            0x04ee9a715fbedee6,
            0xbc164a03ab7e9517,
            0xfbd6a8fccdae0aa9,
            0x1e9aa3fe25d116cc,
        ]),
    ],
    [
        U256::from_limbs([
            0x4f2db45047d5f18b,
            0x7d1ec300da86a169,
            0xfb844ff1a7558b81,
            0x030f33ed70da4c2b,
        ]),
        U256::from_limbs([
            0x0b7af75cbcbe4bb1,
            0x681c39f6c22d9e37,
            0xab417cf2c47389bf,
            0x0282b04137350495,
        ]),
        U256::from_limbs([
            0x4953ac98fec825f0,
            0xe0f220fe1d93d1b5,
            0x96905b88ff05fdf3,
            0x09b1528dea2eb5bd,
        ]),
    ],
    [
        U256::from_limbs([
            0x0e529cda03d9ef71,
            0xfa864b3468b5f920,
            0x11c7a8bfd5e55567,
            0x30083dbbb5eab393,
        ]),
        U256::from_limbs([
            0x9dc17bbea5bcd094,
            0x14ee4e5a91dbc920,
            0x12239cbf51dec0e7,
            0x017eace73cf67c61,
        ]),
        U256::from_limbs([
            0x3370cf4118428097,
            0x4e215df97e928794,
            0x65b90f8d568683d5,
            0x37af1de8f5475ba1,
        ]),
    ],
    [
        U256::from_limbs([
            0xa4baa73ea0e66f51,
            0x03f0bcb84012f922,
            0x0ec6f2b0f122736d,
            0x16ff7592836a4534,
        ]),
        U256::from_limbs([
            0xa2d1d0084efc3fd9,
            0x76915febc0e40f83,
            0xe60b2edabb1853f4,
            0x1a5985d4b359d03d,
        ]),
        U256::from_limbs([
            0x4d469698e1e1f975,
            0xc5b773b98ab655fd,
            0x8ab9782b1abb267f,
            0x255a9d4beb9b5ea1,
        ]),
    ],
    [
        U256::from_limbs([
            0x7bc4231f5ecb936a,
            0x967bac580a0b9ee5,
            0x28021712be81e905,
            0x34a8d9f45200a9ac,
        ]),
        U256::from_limbs([
            0x8463e788b9a2dcda,
            0x4b4ec6c457b0425b,
            0xf33edd2094f1443b,
            0x0979556cb3edcbe4,
        ]),
        U256::from_limbs([
            0x727f626679272654,
            0x279f6239379c689a,
            0x0666b78b45cfadd5,
            0x2a4d028c09ad39c3,
        ]),
    ],
    [
        U256::from_limbs([
            0xae71430370154b33,
            0x415523fb54f24ec8,
            0x71fe4e89984e2c87,
            0x0c31b68f6850b3bd,
        ]),
        U256::from_limbs([
            0xc023ed2454f2ed90,
            0x1a211d139f2dff5a,
            0x6b8e01cf07d76c61,
            0x1a27ca0b953d3dba,
        ]),
        U256::from_limbs([
            0x37916b9905303180,
            0xf268b952dfd95a39,
            0xb86d7169196d2212,
            0x109ae97c25d60242,
        ]),
    ],
    [
        U256::from_limbs([
            0x3caf53caa83ad9c4,
            0xc996588170887868,
            0xb9abac089ec2de79,
            0x3698c932f2a16f7b,
        ]),
        U256::from_limbs([
            0xb7cac7ed32ade6c0,
            0x0e031c8c76a93497,
            0xc1360f8a9a9fa0be,
            0x3c7e25e0ac8fba3d,
        ]),
        U256::from_limbs([
            0x237512f48c858a79,
            0xefab3099360ec960,
            0xa7dfca0f5492f1b6,
            0x2fc5023c5e4aed5a,
        ]),
    ],
    [
        U256::from_limbs([
            0x85ba8d647eda6765,
            0xf53063d3a2e87fd2,
            0x6fb4fdfa2a018e03,
            0x2c124735f3f92454,
        ]),
        U256::from_limbs([
            0xe0d98340a3382251,
            0x26c44b23f3486fbe,
            0xf9033f8b6c1e3571,
            0x12c875c9b79591ac,
        ]),
        U256::from_limbs([
            0xd3e473fd8855528d,
            0x131cb165a353073f,
            0x9a7db8476aeda5a5,
            0x3cda935e895857d3,
        ]),
    ],
    [
        U256::from_limbs([
            0x0def1512815d8759,
            0x588779a7368e3d01,
            0xf1eb922ef80b0852,
            0x218eb756fa5f1df9,
        ]),
        U256::from_limbs([
            0xb082a3cf301cfbc6,
            0x57d59885522f25f4,
            0xf171fbb4329bca0c,
            0x23bcf1032957015e,
        ]),
        U256::from_limbs([
            0x1c1f656205d7bceb,
            0xc7f3867b3dd757c7,
            0x7df64b9e4d62badb,
            0x17474c3b6a9bc105,
        ]),
    ],
    [
        U256::from_limbs([
            0xc9e870edffa3d550,
            0xae3d4c18535f4b60,
            0xeb41745d3bd412c2,
            0x019826c0ee22972d,
        ]),
        U256::from_limbs([
            0x5ed61992bc43efa9,
            0x8816bed0368ded43,
            0xf3275f698319b68d,
            0x30bcb17dfd622c46,
        ]),
        U256::from_limbs([
            0xbc7b4c042ff2c94b,
            0x6a0f82f3c0d49b09,
            0x229cfbd1f4a3a42e,
            0x3bd816c214c66410,
        ]),
    ],
    [
        U256::from_limbs([
            0x2a52e8d045633ea1,
            0x46c3b6d1982280e9,
            0x3c840757738979b1,
            0x08943ec01d9fb9f4,
        ]),
        U256::from_limbs([
            0xdf890bf898b57e47,
            0xbc79ad2f9d1e3145,
            0xc70976269d89ed58,
            0x2670bf8c01822e31,
        ]),
        U256::from_limbs([
            0xc75a0d3bb20407f9,
            0x93effa94ed765eee,
            0xbd3e689b65ebcca4,
            0x0dd53b41599ae78d,
        ]),
    ],
    [
        U256::from_limbs([
            0x20bb0a2253f203c3,
            0x9a1d88e6a9afa792,
            0x8c8e76a8a565c868,
            0x068177d293585e0b,
        ]),
        U256::from_limbs([
            0xeac67b451d6b2cf5,
            0x92fe7a10bf874b1e,
            0xdc324ad8d8cf0cc7,
            0x35216f471043866e,
        ]),
        U256::from_limbs([
            0x31cc83ee0464f6af,
            0xeb2a5a9041bbf846,
            0xec3736e7f7448c01,
            0x1fd6efb2536bfe11,
        ]),
    ],
    [
        U256::from_limbs([
            0x21daf0af10033c67,
            0x364d5a4324575e47,
            0xfc1b48dafcd9e3cc,
            0x2c982c7352102289,
        ]),
        U256::from_limbs([
            0x3b13cf94851c1b45,
            0x8771b832af5bb5dc,
            0xb9c722d4d0777885,
            0x352f7e8c7662d86d,
        ]),
        U256::from_limbs([
            0x43435147149e37d5,
            0x63d8c9b034ae47db,
            0x66ee1ab6f55a5c80,
            0x18e3c0c1caa5e3ed,
        ]),
    ],
    [
        U256::from_limbs([
            0x2daaab238422eade,
            0xe30e03e0919559bf,
            0x3d96c1a08d507523,
            0x3124b12deb37dcbb,
        ]),
        U256::from_limbs([
            0xb9bfc1713215dc9a,
            0xe5727833683d9740,
            0x21095200d2d406e6,
            0x143bf0def31437eb,
        ]),
        U256::from_limbs([
            0x6bde934a8ef38f17,
            0x977480767b53c71f,
            0x9d9a90ad62b8483c,
            0x1ebee92143f32b4f,
        ]),
    ],
    [
        U256::from_limbs([
            0x9f41f2e81383ebeb,
            0xf9e83013478628cf,
            0x94088d5f8ee6c47b,
            0x0ff6c794ad1afaa4,
        ]),
        U256::from_limbs([
            0xdd1f8f9a24804f17,
            0xf4096cf41a7f214f,
            0x2e8bdf2cdb49ac2c,
            0x3d0a10ac3ee707c6,
        ]),
        U256::from_limbs([
            0x37bed06a31801c91,
            0x3352b95d472ead19,
            0xd037c56bdfa370a7,
            0x1d61014cd3ef0d87,
        ]),
    ],
    [
        U256::from_limbs([
            0x7de169875f90c525,
            0xb25c8fdb468e329e,
            0x507ac1e4e743589b,
            0x123e185b2ec7f072,
        ]),
        U256::from_limbs([
            0xbae7f409ebdbecf2,
            0xa9799bdc7e08b527,
            0x623732824c75017d,
            0x30b780c0c1cb0609,
        ]),
        U256::from_limbs([
            0x46edf655d6f5afef,
            0x37a2ed5cf1eeee3d,
            0x9f68195612965c6e,
            0x1dfb3801b7ae4e20,
        ]),
    ],
    [
        U256::from_limbs([
            0x8b78311e1f049528,
            0x019a9611928dda72,
            0x64e963c741552556,
            0x2fdee42805b27740,
        ]),
        U256::from_limbs([
            0xdc75654547e4a22b,
            0xcb51c9f493bff71c,
            0x36fdda5358d90cd9,
            0x31b2b65c431212ed,
        ]),
        U256::from_limbs([
            0xfe62fa220319e0ef,
            0x9644c0614801379c,
            0x8db7a543e62ac2e6,
            0x1e3ca033d8413b68,
        ]),
    ],
    [
        U256::from_limbs([
            0xca09d01730dad432,
            0xe52e9cf15e5ec2b4,
            0x52a32d93f9313153,
            0x0c8ef1168425028c,
        ]),
        U256::from_limbs([
            0x6f1a22cf8552638e,
            0x6187ea301380ecfb,
            0x94a34f75e5de7a7a,
            0x378c73373a36a5ed,
        ]),
        U256::from_limbs([
            0x829c7a75a85c2f44,
            0x489ba404d7f5f15b,
            0x4015e8f221657fbe,
            0x3218aeec20048a56,
        ]),
    ],
    [
        U256::from_limbs([
            0x0cd2c82cf767794e,
            0x9c77119c1825c656,
            0x0f20f30931b07037,
            0x3312ef7cbbad3143,
        ]),
        U256::from_limbs([
            0x58cecd982dba478c,
            0x2d20fb45c36698d2,
            0x607fa31ded8c0c0d,
            0x356449a71383674c,
        ]),
        U256::from_limbs([
            0x167a20bcb57db359,
            0x682c87fac2adb332,
            0x21174e55b49b2485,
            0x0cc88d1c91481d53,
        ]),
    ],
    [
        U256::from_limbs([
            0xc58a4b9390cc300f,
            0x49b94e18d773c6c0,
            0xad284bc48ab959f3,
            0x1defccbd33740803,
        ]),
        U256::from_limbs([
            0xfd716bc3ee7034fe,
            0x2063be831cb1548f,
            0x768d9e1d2bf2cbf3,
            0x2d263cc2e9af126d,
        ]),
        U256::from_limbs([
            0x97fffa1b479e969d,
            0x2558a33b6b11285a,
            0xe241028ce3d347c5,
            0x111e314db6fb1a28,
        ]),
    ],
    [
        U256::from_limbs([
            0x329e537b513f453e,
            0x703199c2372d23ef,
            0x434cba2868e9e371,
            0x027409401e92001d,
        ]),
        U256::from_limbs([
            0x047d410770ffffa0,
            0x16b8a57bdd5f84e1,
            0xedd5e85a59867d49,
            0x24a852bdf9cb2a8f,
        ]),
        U256::from_limbs([
            0x7746d21b47329d6e,
            0xeb81e03d2a296655,
            0x845ac64ff7e383a3,
            0x205d1b0ee359f621,
        ]),
    ],
    [
        U256::from_limbs([
            0xc91c79db982df903,
            0xbe4c12da7d55a2b1,
            0x0f23b5e41c931bfb,
            0x25c327e2cc93ec6f,
        ]),
        U256::from_limbs([
            0x1cf80e70884982b9,
            0xe79e8f0b9599dff0,
            0x265da50ef175909c,
            0x39df3e22d22b09b4,
        ]),
        U256::from_limbs([
            0xf98fb30efcdfaa01,
            0x45f40faaa59cb8df,
            0x08c5b14e5eb8611b,
            0x09b08d58853d8ac9,
        ]),
    ],
    [
        U256::from_limbs([
            0xc5c1dbaa9c57a0a6,
            0xf8884f397375c0f3,
            0xdb4a68f9cddaaf52,
            0x1ece62374d79e717,
        ]),
        U256::from_limbs([
            0xe3fd49639b9fa1c1,
            0x87d7bcce03441475,
            0xe263fa5e35b618db,
            0x3bd089b727a0ee08,
        ]),
        U256::from_limbs([
            0xc0cc12f51a7b2aff,
            0xee9b32b874b93dcf,
            0xc94c95141bfb4719,
            0x3fedea75f37ad9cf,
        ]),
    ],
    [
        U256::from_limbs([
            0xb20ec3424d0e65cd,
            0xcb43aca9d4e0a251,
            0x228494a8acaf0668,
            0x36dfa18a9ba1b194,
        ]),
        U256::from_limbs([
            0xf57c658f41931d0c,
            0xa5498b0d411a1437,
            0xcb3b0632567d9cca,
            0x119e98db3f49cd7f,
        ]),
        U256::from_limbs([
            0xbd9b7f45e6d02c19,
            0x5c54ad3cc56ca22a,
            0x16b3efcd75c3ae13,
            0x1100b21c306475d8,
        ]),
    ],
    [
        U256::from_limbs([
            0x800f4bbee4ea5119,
            0x157f003c65b64aa9,
            0x7208c82794eb667f,
            0x15791f9bbea21393,
        ]),
        U256::from_limbs([
            0xc1ab4285b350be64,
            0x16eb3e3dc8d5d440,
            0xcfd250ebee56a2a8,
            0x1adbeb5e9c4d515e,
        ]),
        U256::from_limbs([
            0x20bf0e813ceecbc3,
            0xab09e26bea29ab00,
            0x9aec253e8e4260e4,
            0x1fbf4738844a9a24,
        ]),
    ],
    [
        U256::from_limbs([
            0x9af3e3b0434eaf0e,
            0xd407388cce83949b,
            0x086459bb9e63a821,
            0x3418a929556ec51a,
        ]),
        U256::from_limbs([
            0x736cda0432e8ff9e,
            0x44afb240d48eeab1,
            0x997405d0c51be695,
            0x09406b5c3af0290f,
        ]),
        U256::from_limbs([
            0xf89b6de1336f5bc7,
            0x2d1d873c9141ef01,
            0xd43cd923e5e3e2f6,
            0x23ece5d70b38ccc9,
        ]),
    ],
    [
        U256::from_limbs([
            0x661f2ef87e67234d,
            0x40cf96c524a62965,
            0x0b1e64f6c41eeb8d,
            0x1852d574e46d370a,
        ]),
        U256::from_limbs([
            0xb3789d9828b0ce90,
            0x37b508674a366c66,
            0x38ea896dde273b75,
            0x0a657027cce8d4f2,
        ]),
        U256::from_limbs([
            0x2a850e45511f5a2d,
            0xbaa73c723baf2192,
            0x08fbbb68fd94f8f2,
            0x3482f98a46ec3581,
        ]),
    ],
    [
        U256::from_limbs([
            0x2a6329c1ec5463ee,
            0x0237e17ad6abc76d,
            0x35a6cbf76131d243,
            0x3f62f164f8c905b3,
        ]),
        U256::from_limbs([
            0x9ea2925685694df0,
            0x4b15c5eab567d5a6,
            0xa028465b2950ea44,
            0x07e397f503f9c1ce,
        ]),
        U256::from_limbs([
            0x6aedb216db17a876,
            0xb2703ae0a0b4edb8,
            0x3d6eb50a09fbfb05,
            0x0405f1fc71187237,
        ]),
    ],
    [
        U256::from_limbs([
            0xfcfec754a25658c1,
            0x1c97afa14a844406,
            0x27110ad842c50244,
            0x0be0848eb3e09c70,
        ]),
        U256::from_limbs([
            0x1d984f905d9ba870,
            0xffed06b697d847f6,
            0x0bac92d0e7792bb5,
            0x26b78788fd98ac02,
        ]),
        U256::from_limbs([
            0x7005871355dfa573,
            0x1c0ec4363e6cc068,
            0x2fef9bdd33315a54,
            0x38fd5318d39055c8,
        ]),
    ],
    [
        U256::from_limbs([
            0xe8c8bc687d5216de,
            0x1a5002218c617294,
            0xba3830e7cace72f9,
            0x380bd03b840c48c8,
        ]),
        U256::from_limbs([
            0x5622895c531b4e1c,
            0x416bc8426f30e2af,
            0x0299ed49c3d74759,
            0x2c6e57ddc1d7c81a,
        ]),
        U256::from_limbs([
            0x58b175e3bc4584f3,
            0x0de8cb9dd162d97c,
            0xf506ee6d88e5991d,
            0x11d3a81b262fc76e,
        ]),
    ],
    [
        U256::from_limbs([
            0x5741deb6a1ba7def,
            0x2adf67ddf5861492,
            0xb1e448969ace9be6,
            0x09b6b283ebaf45fb,
        ]),
        U256::from_limbs([
            0xb6f6dfcdac504ade,
            0x82821a17bc5563a5,
            0x3fa83cdf776d4363,
            0x15d5095164c88576,
        ]),
        U256::from_limbs([
            0x2293308eff7d9124,
            0xad9c4252b23d12c1,
            0x063eb138c5055c6c,
            0x3427fdbfca3cea23,
        ]),
    ],
    [
        U256::from_limbs([
            0xe0656672c81685fe,
            0x94db1da5f6a7e1ee,
            0x317ef2543c33b861,
            0x272f12e731077b74,
        ]),
        U256::from_limbs([
            0x95f183e769f42967,
            0x4967913a2bdce119,
            0x193c37a73d76f611,
            0x05323f85deb8c07c,
        ]),
        U256::from_limbs([
            0x952b097f3852d3d8,
            0x94f46efddff2fcca,
            0x2b417ea3a501b446,
            0x3d5ce415ecae4ba4,
        ]),
    ],
    [
        U256::from_limbs([
            0xd7fd5bfe1d3db8f2,
            0xb8c0c7391cf9479c,
            0xd42047f1f0b2a90c,
            0x0e8ec18c7b52c514,
        ]),
        U256::from_limbs([
            0xd01a833ed0a9ef1a,
            0xddbeaf3afae54edc,
            0x54304519f8bb268b,
            0x01591c865ea7065d,
        ]),
        U256::from_limbs([
            0x2d74729dfc3119fb,
            0x41e0d71186d8f0f6,
            0xee4bf1789c435e12,
            0x3eddbeeee5eca5de,
        ]),
    ],
    [
        U256::from_limbs([
            0xf8f762af3e355707,
            0x3c1993e6ecf458de,
            0x268766e8d491716d,
            0x23691c7009b9283b,
        ]),
        U256::from_limbs([
            0x4f1c4db397d4c09b,
            0x34907374d81a61a3,
            0x5bea4be1d6f04880,
            0x26cdab2c837ebeac,
        ]),
        U256::from_limbs([
            0xb55653c1df72ef56,
            0x0c264a7410a2cdb6,
            0xe0676dad1fee0e99,
            0x2d2206730664d58b,
        ]),
    ],
    [
        U256::from_limbs([
            0x94b7117b0be9217f,
            0x4086e62b04985dd7,
            0xa4ef5f6d18e2ece5,
            0x2bb74bb185372334,
        ]),
        U256::from_limbs([
            0x589b28cd851b2204,
            0x07ff3c598410199b,
            0xd5aa35f0a1427549,
            0x366250fe928c45d8,
        ]),
        U256::from_limbs([
            0x022d9976bdc34af1,
            0x8953179c20f73a44,
            0xa5a61a81c8aaca12,
            0x1868f8118482c6b4,
        ]),
    ],
    [
        U256::from_limbs([
            0x4bdc07ae2f78b4d3,
            0xc963f0f7a6ca2499,
            0x726eb88d000950b3,
            0x0b7901c670e1d75d,
        ]),
        U256::from_limbs([
            0x03314566db90b870,
            0xe6c8a101dfc5e8dd,
            0x5af77af57dd340c8,
            0x032c4bd8ab70e1f2,
        ]),
        U256::from_limbs([
            0x00f0e7b486c0ab8a,
            0x5c41a8f0a6509bfe,
            0xd9308db9aa43a8af,
            0x1ce36db31fe6ea3c,
        ]),
    ],
    [
        U256::from_limbs([
            0xff6ca855fe4b7c6e,
            0x0505e2449e325810,
            0xda3479e9d13c3c92,
            0x26596ea9e1915e53,
        ]),
        U256::from_limbs([
            0x0e713509d3a6d5dc,
            0x304df31729559a27,
            0xca8f5b1e269c0116,
            0x30f296a269868a7f,
        ]),
        U256::from_limbs([
            0x919a994dfd1979d5,
            0x52640647cbd23136,
            0x87eb6ac72350ef9f,
            0x02588961eff7897d,
        ]),
    ],
    [
        U256::from_limbs([
            0xdb2485595409d62b,
            0xbaf9a2abf4b89388,
            0x0d41e06229e9bc2d,
            0x16a49e69721e8069,
        ]),
        U256::from_limbs([
            0x9d3adf3d6c5da7bf,
            0x3a31888afc4a444d,
            0x8073cfd67210cd42,
            0x3d7aca02c051fcad,
        ]),
        U256::from_limbs([
            0xe25431ef951847b4,
            0x72421de5a6437fa5,
            0x075268312ab8072c,
            0x299bd48a740b7790,
        ]),
    ],
    [
        U256::from_limbs([
            0xdc6a42b99072902b,
            0xe36eefaea9e8126b,
            0xc1b2f28e96617129,
            0x11a69b867d9ea22e,
        ]),
        U256::from_limbs([
            0xe7a70fca22da64ce,
            0x1b3a40794b2358b2,
            0x284a95da92b5883d,
            0x25bc1af391f3c1f2,
        ]),
        U256::from_limbs([
            0x365de43895de0baa,
            0x9f89b6d9aa117b8f,
            0xdede39d82bb1a810,
            0x361ab3843f4d8dda,
        ]),
    ],
    [
        U256::from_limbs([
            0x06d5c960f49dd45b,
            0x227659b41fdf1452,
            0x3465a017a9c8ba4c,
            0x38ef3ab5b61c117a,
        ]),
        U256::from_limbs([
            0x94feaf560aaae20f,
            0x238ae43c249783f6,
            0xbd335604a1a14daf,
            0x3992f83f26143dbd,
        ]),
        U256::from_limbs([
            0x869e1dc7fa1dc638,
            0xa9ed84a04301cb30,
            0xb10ecd039aad99cf,
            0x350287977eb71c81,
        ]),
    ],
    [
        U256::from_limbs([
            0x802c48b1da97d6ed,
            0xa3f3b834ca9678d6,
            0xdcccba32dd054cd9,
            0x3afb5bc126020586,
        ]),
        U256::from_limbs([
            0x8f59072c729de671,
            0xd0970c54966407fa,
            0xd183a2575b790749,
            0x172b7c2d8e7e4b06,
        ]),
        U256::from_limbs([
            0xf4d368c1f67d57e4,
            0x269935aec6c897be,
            0x70494569e54a0f0d,
            0x2eb53fe3a278688a,
        ]),
    ],
    [
        U256::from_limbs([
            0xee6a5bb7078b5035,
            0xf0393e5a321b71ca,
            0x553ed77d406dedc3,
            0x0375ae56b8d9310d,
        ]),
        U256::from_limbs([
            0xadbf54bc17c1ef38,
            0xe46a7031d5e5d43f,
            0xbf1fb5d1da9bb76f,
            0x1d49a0d53bc2993c,
        ]),
        U256::from_limbs([
            0xf71426367f953160,
            0xd37957e989c44f1f,
            0x7ddfa1f01df1724a,
            0x132d17b87cab6d70,
        ]),
    ],
    [
        U256::from_limbs([
            0x0060be4be6755f85,
            0x0f9ec179a4414675,
            0xc4acc7e6a1aa421f,
            0x062da5280948d8c6,
        ]),
        U256::from_limbs([
            0xbbbf211d1add80f9,
            0x2510c300f21930d6,
            0xea4e57ee4132d2ab,
            0x0a4b4d5cde54a974,
        ]),
        U256::from_limbs([
            0xcd78fbf3ff864e91,
            0xe49965c19284d7aa,
            0xab752b70bbed821c,
            0x3356f1fbeac493cc,
        ]),
    ],
    [
        U256::from_limbs([
            0x7e653ec6ff8a4059,
            0xfbf4cb1b8f47d37e,
            0x7851feb0e0190c5d,
            0x042721e8a9cc3255,
        ]),
        U256::from_limbs([
            0x21e86f47cdf748b1,
            0x318128cdf01897d3,
            0xa4fc5724ce6b4422,
            0x053d9b2633fff31c,
        ]),
        U256::from_limbs([
            0x6a786219fb4c801c,
            0x532a22f020549471,
            0xd3db1f0668b09ccd,
            0x267d96caeafde5db,
        ]),
    ],
    [
        U256::from_limbs([
            0x56d774101650a6ca,
            0x8aac12cd7b95b8d2,
            0x3c3f9ffcfd4e23d3,
            0x3931699773761019,
        ]),
        U256::from_limbs([
            0x096bca5f377981fb,
            0x4c6b200b9101b3a5,
            0xfdabf9b23529f7c8,
            0x191e377462986563,
        ]),
        U256::from_limbs([
            0x55eca62fe73ff3d9,
            0x3a7925ad0798cab6,
            0x60d2059a0ec209cf,
            0x20f89af9722f79c8,
        ]),
    ],
    [
        U256::from_limbs([
            0x879df3534a7d1e0b,
            0x785b9ca145d97e35,
            0x1a7c78ecf104d32d,
            0x1ca568aeddb2ef39,
        ]),
        U256::from_limbs([
            0x0e4abf090211251c,
            0x78d91881b6f94ee7,
            0xb4c0b9c3bc25cbbf,
            0x25de9ba0a37472c3,
        ]),
        U256::from_limbs([
            0x2d26518cd568e1ef,
            0xf0e55c62f0508ccc,
            0x1c7583bee07e605e,
            0x3393debd38d31188,
        ]),
    ],
    [
        U256::from_limbs([
            0x3e78bc7a4515c5b1,
            0x642d5c397388d1dd,
            0x3806aa9d994a611f,
            0x038df2fd18a8d756,
        ]),
        U256::from_limbs([
            0x7a6667047f6d501c,
            0xc9222b0908f44553,
            0x2435ad9148d7fb94,
            0x05c6503ff1ee548f,
        ]),
        U256::from_limbs([
            0x2eb798468a82a2ab,
            0xb101a220aa8f9057,
            0xd3d664826dc9565d,
            0x104c88d6d0682d82,
        ]),
    ],
    [
        U256::from_limbs([
            0x471f90bfa4ac628b,
            0xc3ca3c56a80003c8,
            0xee7851b4a2d2d3b7,
            0x2caad6108c09ee6a,
        ]),
        U256::from_limbs([
            0xc4bd7088aa0353f3,
            0xdb966177346f1792,
            0x8a97bc7285f94bcd,
            0x0a57dbd4c327826c,
        ]),
        U256::from_limbs([
            0xe32fea39fbe908fa,
            0xa1cc9eb91d83b918,
            0x8433d01bb53ba04b,
            0x3c15552f9124318b,
        ]),
    ],
    [
        U256::from_limbs([
            0xe66d2075f623b513,
            0xc222208bd4fa8f3b,
            0x9441c6299c4fc087,
            0x0e10c10cbbe1717a,
        ]),
        U256::from_limbs([
            0xd640042cb879a930,
            0xa9570f590e497cb2,
            0x83dff1728c81dd22,
            0x1e8b254cbff2c92a,
        ]),
        U256::from_limbs([
            0x41c4adc43f2b2352,
            0xd1faf5786419b538,
            0x0057bbfdd0cc4d31,
            0x1812dbcd70c44061,
        ]),
    ],
];


pub struct FiniteField;
impl FiniteField {
    pub fn mod_p(x: U256, p: U256) -> U256 {
        if x < p {
            x
        } else {
            x % p
        }
    }

    pub fn power(a: U256, n: u32, p: U256) -> U256 {
        let mut a = Self::mod_p(a, p);
        let mut x = U256::from(1);
        let mut n = n;

        // Special optimization for power 7 (used in Poseidon)
        if n == 7 {
            let a2 = Self::mul(a, a, p); // a^2
            let a4 = Self::mul(a2, a2, p); // a^4
            let a3 = Self::mul(a2, a, p); // a^3 = a^2 * a
            return Self::mul(a4, a3, p); // a^7 = a^4 * a^3
        }

        // General case for other exponents
        while n > 0 {
            if n & 1 != 0 {
                x = Self::mul(x, a, p);
            }
            a = Self::mul(a, a, p);
            n >>= 1;
        }
        x
    }

    pub fn add(x: U256, y: U256, p: U256) -> U256 {
        let sum = x.wrapping_add(y);
        if sum >= p {
            sum - p
        } else {
            sum
        }
    }

    pub fn mul(x: U256, y: U256, p: U256) -> U256 {
        let x_mod = Self::mod_p(x, p);
        let y_mod = Self::mod_p(y, p);

        // For large numbers, we need to be careful about overflow
        if x_mod == U256::ZERO || y_mod == U256::ZERO {
            return U256::ZERO;
        }

        // Use widening multiplication approach to handle potential overflow
        let mut result = U256::ZERO;
        let mut multiplicand = x_mod;
        let mut multiplier = y_mod;

        while multiplier > U256::ZERO {
            if multiplier & U256::from(1) != U256::ZERO {
                result = Self::add(result, multiplicand, p);
            }
            multiplicand = Self::add(multiplicand, multiplicand, p);
            multiplier >>= 1;
        }

        result
    }
}

pub struct PoseidonHash;

impl PoseidonHash {
    // Prime field modulus for Mina
    const P: U256 = U256::from_limbs([
        0x992d30ed00000001,
        0x224698fc094cf91b,
        0x0000000000000000,
        0x4000000000000000,
    ]);

    /// Main hash function - equivalent to the C# Hash method
    pub fn hash(input: Vec<U256>) -> U256 {
        let initial_state = vec![U256::ZERO; 3];     
        Self::poseidon_update(initial_state, input)[0]
    }

    pub fn poseidon_update(
        mut state: Vec<U256>,
        input: Vec<U256>
    ) -> Vec<U256> {
        if input.is_empty() {
            Self::permutation(&mut state);
            return state;
        }

        // Calculate padded length
        let padded_len = if input.len() % 2 == 0 {
            input.len()
        } else {
            ((input.len() / 2) + 1) * 2
        };

        let mut array = vec![U256::ZERO; padded_len];

        // Copy input to array
        for (i, &val) in input.iter().enumerate() {
            array[i] = val;
        }

        let p = Self::P;

        // Process each block
        for chunk in array.chunks(2) {
            for (i, &val) in chunk.iter().enumerate() {
                if i < 2 {
                    state[i] = FiniteField::add(state[i], val, p);
                }
            }
            Self::permutation(&mut state);
        }

        state
    }

    pub fn permutation(state: &mut Vec<U256>) {
        let p = Self::P;
        let state_size = 3;

        // Handle initial round constant if needed
        let mut round_offset = 0;      

        // Main rounds
        for round in 0..55 {
            // S-box layer: raise each element to power
            for i in 0..state_size {
                state[i] = FiniteField::power(state[i], 7, p);
            }

            // Linear layer: matrix multiplication + round constants
            let mut new_state = vec![U256::ZERO; state_size];
            for i in 0..state_size {
                let mut acc = ROUND_CONSTANTS[round + round_offset][i];
                for j in 0..state_size {
                    let prod = FiniteField::mul(MDS[i][j], state[j], p);
                    acc = FiniteField::add(acc, prod, p);
                }
                new_state[i] = acc;
            }
            *state = new_state;
        }
    }
}
